[{"content":"In preparation for my upcoming conference talk \u0026ldquo;The Internet of Things and iOS: Don’t let your toaster bring down the internet!\u0026rdquo; I have been doing a lot of research on the Mirai botnet.\nThe Mirai (Japanese for \u0026ldquo;The Future\u0026rdquo;) botnet was used in a DDoS attack against the DNS service provider Dyn on October 21st, 2016.\nIn this attack, some IoT devices were used to block their servers, bringing down popular sites such as\nReddit Github Twitter Spotify Yelp and others \u0026hellip; for most of the US east coast (affected area dependent on routing and Dyn\u0026rsquo;s distribution).\nWhen doing my research though, I was blown away by two things, one of which I want to talk about in this post:\nThe sheer simplicity of the attack-vector Mirai used to attack and gain its victims The poor quality reporting some major tech (news) outlets put out on the web You can guess about which part we\u0026rsquo;re talking about first! That\u0026rsquo;s right; we\u0026rsquo;re discussing the poor quality reporting first. To be frank, under normal circumstances I would avoid using strong language, but the journalistic standards in this coverage were remarkably lacking.\nFor my research, I used Google and DuckDuckGo to find reporting and info on my topic. To start off, I was searching for:\n\u0026ldquo;Internet Outage October 21, 2016.\u0026rdquo; \u0026ldquo;Mirai Attack October 2016.\u0026rdquo; \u0026ldquo;Mirai Botnet.\u0026rdquo; The first query got me a lot of non-technical news that were covering the events of October 21st, 2016 regarding the DDoS attack we\u0026rsquo;re talking about. Some of the top results were CNN, USAToday, and Wikipedia.\nWhile I expect those sites to be at least half decent (except Wikipedia), I don\u0026rsquo;t expect them to be too much to detail \u0026hellip; and so I skipped that query.\nThe second query though had to deliver better results. I was giving the child a name - Mirai - and I was not disappointed. Sites like Wired, Gizmodo and Techcrunch came up and so did another source KrebsOnSecurity.\nAs expected, the third query returned almost the same results as the second.\nThere I was, reading through a dozen articles reporting on the subject. I skipped the one\u0026rsquo;s I knew would tell me the apocalypse is coming and it\u0026rsquo;s coming from Russia (with love), like Huffington Post but I kept reading everything else.\nWhile Wired and Gizmodo did nothing else than awfully citing Dyn\u0026rsquo;s Tweets and putting up an updated ticker, \u0026ldquo;The Verge\u0026rdquo; concentrated on copying Wired\u0026rsquo;s stupid GIF that I won\u0026rsquo;t spare you:\nSource: Gizmodo\n(If you wonder why I think it\u0026rsquo;s senseless, that\u0026rsquo;s because there\u0026rsquo;s no movement, why would you post a low-quality GIF then? Second, on that scale, it could be whatever state)\nIn fact, all the sites mentioned (except KrebsOnSecurity) shared almost the same story using nearly identical language:\nIt was a DDoS attack DNS works like a phonebook (\u0026hellip;) IoT Security is flawed But interestingly I also found this:\nYes, that\u0026rsquo;s 50 Million devices claimed by The Verge, Gizmodo and TechCrunch and approx. 1% of that claimed by BeyondTrust and less than that by KrebsOnSecurity.\nNow let\u0026rsquo;s go back for a second, Gizmodo and TheVerge collaborate and cite each others mentioning \u0026ldquo;Tens of Millions of IP Addresses\u0026rdquo; attacked Dyn that day. I chose 50 Million as a middle ground for that vague statement, forgive me.\nTechCrunch chose the same citing from Dyn without fact checking it, which is just as bad.\nBeyondTrust posted on October 24th that Mirai has 550 000 active nodes \u0026ldquo;according to Dale Drew, the CISO of Level 3 Communication\u0026rdquo;.\nAnd KrebsOnSecurity suggests that Mirai has between 300 000 and 380 000 active nodes. Taking numbers from a HackerForums post from the person that posted Mirai\u0026rsquo;s source code after the attack.\nErrataSecurity does its calculations with about 2.5M, but as they mention their numbers are not backed, so I would exclude them from this comparison of ridiculousness.\nHmm, so I\u0026rsquo;ve asked myself whom I would trust in this discussion?\nThe news outlets that blindly quote Dyn who has to protect itself at their weakest point or some hacker that posted the actual source code used in said attack? Or do I even believe the Level 3 person that might have had some insight into the traffic generated over time?!\nPersonally, I don\u0026rsquo;t know and it is extremely hard to say what the actual numbers are if no one took responsibility and gave a number, but blindly citing people and claiming numbers without putting any doubt at it seems to lead to more confusion than anything else.\nSo what would I expect to happen?\nWell, I would wish that when you post a story about a major incident, you post more facts than spreading rumors. \u0026ldquo;Tens of Millions\u0026rdquo; seems unlikely in the face of the facts that surfaced the same day about Mirai. So why not mention that? If you don\u0026rsquo;t understand the technology, just link to another site that\u0026rsquo;s reputable instead of wrongfully explaining something. That\u0026rsquo;s it from me on the news coverage about the Mirai Botnet used in the Dyn attacks last October.\nBefore I stop writing, I want to mention one other site reporting on the issue: Incapsula\nIt\u0026rsquo;s funny to see how they claim to have uncovered that the Mirai Botnet consisted of 49 657 devices and even gave a distribution by country chart. Although even better is their \u0026ldquo;Mirai Scanner\u0026rdquo; tool that tells you if you\u0026rsquo;re infected with Mirai.\nI have no words for how they display if you are infected: I suppose that\u0026rsquo;s what happens when you force your employees to write blog posts—at least they put the \u0026ldquo;BETA\u0026rdquo; tag there.\n","permalink":"https://iflorian.com/mirai-botnet-october21-botnet-size/","summary":"\u003cp\u003eIn preparation for my upcoming conference talk \u003ca href=\"https://360idev.com/sessions/internet-things-ios-dont-let-toaster-bring-internet/\"\u003e\u0026ldquo;The Internet of Things and iOS: Don’t let your toaster bring down the internet!\u0026rdquo;\u003c/a\u003e I have been doing a lot of research on the Mirai botnet.\u003cbr\u003e\nThe Mirai (Japanese for \u0026ldquo;The Future\u0026rdquo;) botnet was used in a DDoS attack against the DNS service provider Dyn on October 21st, 2016.\u003cbr\u003e\nIn this attack, some IoT devices were used to block their servers, bringing down popular sites such as\u003c/p\u003e","title":"The Mirai Botnet And The Internet Outage On October 21st 2016"},{"content":"360iDev is coming fast and you should come! Why?\nLet me give you six reasons why you should come:\nSam Davies will give \u0026ldquo;A Fun iOS 11 Workshop\u0026rdquo; on Sunday, Aug 13th On Monday, Aug 14th Joe Cieplinski will talk about \u0026ldquo;Getting Past No: The Science of Moving Others\u0026rdquo; Jay Freeman (Too many references to link to) will be talking about himself?! Anyways, I\u0026rsquo;m sure his session is going to be great! The same day (Aug 15th) Ben DiFrancesco will be talking about \u0026ldquo;Threads, Queues, and Things to Come: The Present and Future of Concurrency in Swift\u0026rdquo; And on the last day (after my talk, which you should visit), hear Andrew Morrow talk about \u0026ldquo;Using C Libraries in Swift 3\u0026rdquo; And with all these great sessions in mind, don\u0026rsquo;t miss me talking about \u0026ldquo;The Internet of Things and iOS: Don’t let your toaster bring down the internet!\u0026rdquo; on Sunday Aug 16th And if that wasn\u0026rsquo;t already enough, I have something special planned for my talk, that includes:\nA behind the scenes look at how Nest, Ecobee and Xiaomi (IoT) is built. Ever wondered how the a few smart toasters and smart fridges took down half the Internet in October last year? We\u0026rsquo;re going to talk about that as well! Want to know how YOU could help prevent that kind of disaster? Get ready to learn essential IoT strategies Last but not least: Be prepared for a fun and exciting presentation. While I want to teach and inspire you with my talk I had a caricaturist help me out with some drawings ;) From here all you have to do is go over to 360iDev buy your ticket and join me in beautiful Denver in two weeks!\nSee you there!\n","permalink":"https://iflorian.com/360idev2017-denver/","summary":"\u003cp\u003e360iDev is coming fast and you should come! Why?\u003cbr\u003e\nLet me give you six reasons why you should come:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://www.raywenderlich.com/u/samdavies\"\u003eSam Davies\u003c/a\u003e will give \u0026ldquo;A Fun iOS 11 Workshop\u0026rdquo; on Sunday, Aug 13th\u003c/li\u003e\n\u003cli\u003eOn Monday, Aug 14th \u003ca href=\"https://releasenotes.tv/aboutthepodcast/\"\u003eJoe Cieplinski\u003c/a\u003e will talk about \u0026ldquo;Getting Past No: The Science of Moving Others\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eJay Freeman (Too many references to link to) will be talking about himself?! Anyways, I\u0026rsquo;m sure his session is going to be great!\u003c/li\u003e\n\u003cli\u003eThe same day (Aug 15th) Ben DiFrancesco will be talking about \u0026ldquo;Threads, Queues, and Things to Come: The Present and Future of Concurrency in Swift\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eAnd on the last day (after my talk, which you should visit), hear Andrew Morrow talk about \u0026ldquo;Using C Libraries in Swift 3\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eAnd with all these great sessions in mind, don\u0026rsquo;t miss me talking about \u0026ldquo;The Internet of Things and iOS: Don’t let your toaster bring down the internet!\u0026rdquo; on Sunday Aug 16th\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAnd if that wasn\u0026rsquo;t already enough, I have something special planned for my talk, that includes:\u003c/p\u003e","title":"Join me at 360iDev - The Leading Indie iOS/macOS Developer Conference"},{"content":"Images Sources Arabica/Barista Icon from AddictedToCoffee Coffee Header Image from Comfreak Legal Disclosure Information in accordance with section 5 TMG\nFlorian Harr\n2196 Hyssop Way\n30519 Atlanta, GA - USA\nContact\nTelephone: +1 513 501 3050\nE-Mail: florian@iflorian.com\nWebsite: https://iflorian.com\nPerson responsible for content in accordance with 55 Abs. 2 RStV\nFlorian Harr\nIndication of source for images and graphics\nPlease consult individual source links\nDisclaimer\nAccountability for content\nThe contents of our pages have been created with the utmost care. However, we cannot guarantee the contents\u0026rsquo; accuracy, completeness or topicality. According to statutory provisions, we are furthermore responsible for our own content on these web pages. In this context, please note that we are accordingly not obliged to monitor merely the transmitted or saved information of third parties, or investigate circumstances pointing to illegal activity. Our obligations to remove or block the use of information under generally applicable laws remain unaffected by this as per §§ 8 to 10 of the Telemedia Act (TMG).\nAccountability for links\nResponsibility for the content of external links (to web pages of third parties) lies solely with the operators of the linked pages. No violations were evident to us at the time of linking. Should any legal infringement become known to us, we will remove the respective link immediately.\nCopyright\nOur web pages and their contents are subject to German copyright law. Unless expressly permitted by law (§ 44a et seq. of the copyright law), every form of utilizing, reproducing or processing works subject to copyright protection on our web pages requires the prior consent of the respective owner of the rights. Individual reproductions of a work are allowed only for private use, so must not serve either directly or indirectly for earnings. Unauthorized utilization of copyrighted works is punishable (§ 106 of the copyright law).\nPrivacy Statement General\nYour personal data (e.g. title, name, house address, e-mail address, phone number, bank details, credit card number) are processed by us only in accordance with the provisions of German data privacy laws. The following provisions describe the type, scope and purpose of collecting, processing and utilizing personal data. This data privacy policy applies only to our web pages. If links on our pages route you to other pages, please inquire there about how your data are handled in such cases.\nInventory data\n(1) Your personal data, insofar as these are necessary for this contractual relationship (inventory data) in terms of its establishment, organization of content and modifications, are used exclusively for fulfilling the contract. For goods to be delivered, for instance, your name and address must be relayed to the supplier of the goods.\n(2) Without your explicit consent or a legal basis, your personal data are not passed on to third parties outside the scope of fulfilling this contract. After completion of the contract, your data are blocked against further use. After expiry of deadlines as per tax-related and commercial regulations, these data are deleted unless you have expressly consented to their further use.\nPrivacy Notice This website does not use analytics tracking, social media plugins, or other third-party data collection services. No cookies are used to track your behavior.\nDisclosure\nAccording to the Federal Data Protection Act, you have a right to free-of-charge information about your stored data, and possibly entitlement to correction, blocking or deletion of such data. Inquiries can be directed to the following e-mail addresses: ( florian@iflorian.com )\nSource: http://www.twigg.de/\n","permalink":"https://iflorian.com/imprint/","summary":"\u003ch2 id=\"images-sources\"\u003eImages Sources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eArabica/Barista Icon from \u003ca href=\"http://addictedtocoffee.de/\"\u003eAddictedToCoffee\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCoffee Header Image from \u003ca href=\"https://pixabay.com/en/users/Comfreak-51581/\"\u003eComfreak\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"legal-disclosure\"\u003eLegal Disclosure\u003c/h2\u003e\n\u003cp\u003eInformation in accordance with section 5 TMG\u003c/p\u003e\n\u003cp\u003eFlorian Harr\u003cbr\u003e\n2196 Hyssop Way\u003cbr\u003e\n30519 Atlanta, GA - USA\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eContact\u003c/strong\u003e\u003cbr\u003e\nTelephone: +1 513 501 3050\u003cbr\u003e\nE-Mail: \u003ca href=\"mailto:florian@iflorian.com\"\u003eflorian@iflorian.com\u003c/a\u003e\u003cbr\u003e\nWebsite: \u003ca href=\"https://iflorian.com\"\u003ehttps://iflorian.com\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePerson responsible for content in accordance with 55 Abs. 2 RStV\u003c/strong\u003e\u003cbr\u003e\nFlorian Harr\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIndication of source for images and graphics\u003c/strong\u003e\u003cbr\u003e\nPlease consult individual source links\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDisclaimer\u003c/strong\u003e\u003cbr\u003e\nAccountability for content\u003cbr\u003e\nThe contents of our pages have been created with the utmost care. However, we cannot guarantee the contents\u0026rsquo; accuracy, completeness or topicality. According to statutory provisions, we are furthermore responsible for our own content on these web pages. In this context, please note that we are accordingly not obliged to monitor merely the transmitted or saved information of third parties, or investigate circumstances pointing to illegal activity. Our obligations to remove or block the use of information under generally applicable laws remain unaffected by this as per §§ 8 to 10 of the Telemedia Act (TMG).\u003c/p\u003e","title":"Imprint and Privacy Disclosure"},{"content":"Two weeks ago Apple held it\u0026rsquo;s annual WWDC keynote announcing the latest updates to their platforms and technologies. The keynote lasted over 2 hours and you might would think that in that much time they have touched at least all technologies on the surface, but one thing especially seemed to have been missing almost entirely. HomeKit!\nWhile Apple seemed to have not shown too much love to that topic during their Keynote, it seems as if they still have given that technology quite some thought leading up to WWDC as Apple quietly made quite a few changes.\nMost notably Apple opened up their HomeKit specs outside their MFi (Made for iPhone) program. If you\u0026rsquo;re a registered developer with Apple you won\u0026rsquo;t have to Google the specs anymore and rely on 3rd party info about HomeKit.\nNext in line are their changes to HomeKit\u0026rsquo;s requirements. Up until this point you had to have Apple\u0026rsquo;s Co-Processor á ka security chip installed in your HomeKit hardware to be able to produce HomeKit enabled hardware. They also dropped this, essentially removing licensing fees when releasing HomeKit hardware and making the process easier. Authentication that was done with Apple\u0026rsquo;s coprocessor can now be done via software authentication. You would still have to go through the MFi program if you intend to sell and publish HomeKit soft-/hardware but you would no longer have to buy Apple\u0026rsquo;s coprocess and pay licensing fees for those.\nPersonally, I value these two changes the most and think they\u0026rsquo;ll have a great impact in the availability of HomeKit enabled devices in the future.\nApart from that, Apple introduced changes to the featureset of their HomeKit platform, adding two new product categories (sprinklers and faucets), enhancements to the sunrise and sunset scenarios and adding temperature triggers.\nThis all might seem like basic stuff that doesn\u0026rsquo;t change much for us developers but it shows that Apple is aware of the huge IoT market and it\u0026rsquo;s potential.\nTo show off what this could potentially mean, let me bring back my ESP8266 based weather station that I introduce in my latest blog post installment here, part II and part III.\nLet\u0026rsquo;s say we wanted to sell this weather station as a real product. After all, hardware costs are very minimal and the software is top notch, but we would want to add HomeKit support so Siri could pick up the temperature from our Weather Station when asked. If we wanted to do this before Apple\u0026rsquo;s HomeKit changes we would have had to apply for their MFi program, acquire Apple\u0026rsquo;s co-processors and after we would have done all that the biggest hurdle would have been to pay licensing to Apple which would have probably killed our product.\nNow with these changes we could simply prototype HomeKit support ourselves. A good point to start off would be this GitHub project that we could connect to our MQTT server we\u0026rsquo;ve setup before, add a config for our weather station by creating a homekit2mqtt.json file with the following contents:\n{ \u0026#34;TemperatureSensor\u0026#34;: { \u0026#34;service\u0026#34;: \u0026#34;TemperatureSensor\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;TemperatureSensor\u0026#34;, \u0026#34;topic\u0026#34;: { \u0026#34;statusTemperature\u0026#34;: \u0026#34;weather/temperature\u0026#34; }, \u0026#34;manufacturer\u0026#34;: \u0026#34;Generic\u0026#34;, \u0026#34;model\u0026#34;: \u0026#34;TemperatureSensor\u0026#34; } } Now all we have to do is to run the homekit2mqtt bridge and we can start to use our weather station with HomeKit.\nIf our server runs and the connection can be made, we can start to add accessory in HomeKit:\nThe accessory is configured by default to be behind a bridge. Next is the actual temperature sensor:\nOnce we\u0026rsquo;ve added that, our temperature sensor should show up in our accessory list:\nAnd we can ask Siri for the temperature in the room we\u0026rsquo;ve assigned the sensor to:\nHomeKit integration was that easy and if we really would plan to sell our weather station including HomeKit integration we could start to implement HomeKit without the homekit2mqtt bridge according to the HomeKit Specification that Apple released and start the MFi process afterwards.\nApple really did a great thing here making HomeKit integration easier! I\u0026rsquo;m excited to see more equipment integrating with HomeKit soon!\n","permalink":"https://iflorian.com/esp8266-weather-station-homekit-special/","summary":"\u003cp\u003eTwo weeks ago Apple held it\u0026rsquo;s annual WWDC keynote announcing the latest updates to their platforms and technologies. The keynote lasted over 2 hours and you might would think that in that much time they have touched at least all technologies on the surface, but one thing especially seemed to have been missing almost entirely. HomeKit!\u003c/p\u003e\n\u003cp\u003eWhile Apple seemed to have not shown too much love to that topic during their Keynote, it seems as if they still have given that technology quite some thought leading up to WWDC as Apple quietly made quite a few changes.\u003c/p\u003e","title":"ESP8266 Special: Apple's HomeKit is now for everyone!"},{"content":" 📝 Note: This post was published in 2017. While the core git concepts remain valid, modern deployment practices often favor SSH keys over passwords, GitHub Actions for automation, or managed deployment platforms. This approach is still functional but represents one of several deployment strategies available today.\nI have recently reported about my new website and the workflow I am using. More specifically about Hugo and GitHub pages.\nOne task GitHub Pages solves perfectly is the need to publish changes. GitHub Pages does that automatically for you, which is one reason I chose it in first place. Due to the limitations on https with custom domains though, I decided to self host my HTML pages once more.\nAnd so I changed my setup once again. I didn\u0026rsquo;t fully drop GitHub Pages, but I redirect the GitHub Pages site to https://iflorian.com through their CNAME option under GitHub Pages -\u0026gt; Settings and I serve the same content just from there.\nNow this brings back exactly the problem I just said GitHub Pages would solve, so I have to solve this problem myself.\nThe Easy Path The easiest path I could choose would be to directly push into the publishing folder of my webserver by adding the remote repo as a git remote and push to it. If there wouldn\u0026rsquo;t be this one problem \u0026hellip;\nI recently read this article \u0026ldquo;Don\u0026rsquo;t publicly expose .git or how we downloaded your website\u0026rsquo;s sourcecode - An analysis of Alexa\u0026rsquo;s 1M\u0026rdquo; on Internetwache.org that nicely shows an issue that is often overlooked when having your website under version control.\nWhile my website is publicly available on my GitHub account including the git history, you normally wouldn\u0026rsquo;t want to expose that in case of a normal homepage setup - and after all, if we don\u0026rsquo;t need to, why would we expose our git data on a website?\nThis is when I found this great writing on this topic: How To Set Up Automatic Deployment with Git with a VPS It has two small minor errors, which is why I want to quickly show how to do the same thing and fix what I just mentioned.\nPushing Website Updates via Git First you want to clone your repo somewhere safe on your server:\ngit clone https://github.com/caffeineflo/repo.git Next, you want to configure git hooks to checkout your HTML files to the directory your webserver is serving:\ncd /path/repo/.git/hooks/ vi post-receive Now you\u0026rsquo;ve opened the post-receive hook, the script you put in here will be executed post receiving a push:\n#!/bin/sh git --work-tree=/path/www --git-dir=/path/repo/.git checkout -f The path you put in under the \u0026ndash;work-tree parameter is your webserver directory and the \u0026ndash;git-dir parameter needs to point to the .git directory where you checked out your website.\nPro Tip: You could only do a flat/bare clone when initially cloning the repo as you don\u0026rsquo;t need your repo in two places.\nMake the script executable:\nchmod +x post-receive You\u0026rsquo;re free to exit your remote machine now.\nOn the local side of things you only need to add your remote now. Depending on what type of connection you use with your remote end you need to adjust this. In your local repo directory, add the remote:\ngit remote add iflorian.com ssh://iflorian/path/repo If you now push your code from your local end to the newly added remote end:\ngit push iflorian.com master Your remote end will receive the push, run the post-receive hook and update your webserver.\nWhile I admit that this solution needs a bit of setup and is therefore more complex than the initial GitHub Pages approach, I think it\u0026rsquo;s a great and safe way to remote update your webserver!\nCongrats! You\u0026rsquo;ve made it!\n","permalink":"https://iflorian.com/setup-git-remote-publishing/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e📝 Note\u003c/strong\u003e: This post was published in 2017. While the core git concepts remain valid, modern deployment practices often favor SSH keys over passwords, GitHub Actions for automation, or managed deployment platforms. This approach is still functional but represents one of several deployment strategies available today.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eI have recently reported about my new website and the workflow I am using. More specifically about Hugo and GitHub pages.\u003c/p\u003e\n\u003cp\u003eOne task GitHub Pages solves perfectly is the need to publish changes. GitHub Pages does that automatically for you, which is one reason I chose it in first place. Due to the limitations on https with custom domains though, I decided to self host my HTML pages once more.\u003c/p\u003e","title":"Setup Git Push To Securly Update Your Website"},{"content":" 📝 Note: This post was published in 2017. While Hugo and GitHub Pages remain relevant, some specific tools and approaches mentioned have evolved. Hugo\u0026rsquo;s syntax and GitHub Pages features have improved since publication. This is preserved as historical reference.\nWith the publication of this post, my transition from Ghost to Hugo will be complete and this blog will be solely run with static HTML files compared to the dynamic Ghost installation I used before. Let me explain why I did this and how you can do this as well.\nStarting Position I started off with a Ghost installation that was hosted on uberspace.de. While uberspace.de is a great hoster and probably the cheapest option to host a Ghost installation, I hated that updates to Ghost itself would be troublesome and that in addition to uberspace.de I had to maintain the domain somewhere and make the whole connection. All I really wanted, was an easy way to publish content and be able to modify styles and enhance theme specific elements.\nHugo seemed to be the perfect solution for that, as the standard Ghost theme casper was available and it would create static HTML files, so I could be able to host my site virtually anywhere as I wouldn\u0026rsquo;t need to be able to run node js on the server.\nAlternatives Alternatives would have been:\nGitHub Pages with the minimal theme Keep Ghost and use buster Get Ghost Pro Yet, GitHub Pages with another theme would have destroyed the design I used to have and to be fair, I really liked the minimalist Ghost Design.\nKeeping Ghost and using buster, would have been the next best solution, in fact, it would have been easier and I would still have been able to host my blog on GitHub Pages or any other webserver as buster bruteforces and creates static HTML files for you. I avoided that option as I felt this wouldn\u0026rsquo;t be a good approach that would completely satisfy my needs for a easy and stable to use blogging platform.\nAnd Ghost Pro was simply out of the picture. On average I spent about 5€/month on uberspace and another 3-4€/month on all-inkl which make it around 8-9€ total for the Ghost blog I used to run. Ghost Pro though, starts at 19€/month which was too expensive for my needs.\nOutlined Path After weighing all my alternatives I decided to go with Hugo as it comes closest to meet all the requirements I set out, most importantly I could host it on GitHub Pages and still be able to easily modify my theme and write content.\nAll I had to then would be to make the transition like this:\n1.) Setup a barebone Hugo installation\n2.) Add casper for hugo theme\n3.) Add content from my existing Ghost installation\n4.) Setup Github Pages with your Hugo setup 5.) Reroute iFlorian.com to work with my Github Pages repo\nMigrate Ghost to Hugo Let\u0026rsquo;s go through this step by step:\n1.) Setup a barebone Hugo installation This one is pretty easy. Hugo has a easy to understand Quickstart guide that helps you with your first setup.\nOpen a Terminal cd into your workspace (e.g. Repository for your project) (Install hugo if you haven\u0026rsquo;t done that yet. brew install hugo if you have homebrew) Create your site hugo new site imnotFlorian.com cd into the newly created directory imnotFlorian.com that hugo created Hugo just created a barebone site for you. If you would run hugo locally to serve the HTML files to you, you wouldn\u0026rsquo;t see a thing yet. So keep on reading.\n2.) Add casper for hugo theme To give your web presence a nice look, we\u0026rsquo;re going to add the casper theme to hugo by issuing the following commands:\nChange into the themes directory cd themes/ Add the casper theme as git submodule (so Github Pages won\u0026rsquo;t complain) git submodule init git submodule add https://github.com/vjeantet/hugo-theme-casper casper 3.) Add content from my existing Ghost installation I thought this one would be the hardest step and require quite some time, but it turns out someone already did the legwork for this one.\nOpen your existing Ghost instance admin panel. Go to Settings -\u0026gt; Labs -\u0026gt; Click on Export. Install ghostToHugo https://github.com/jbarone/ghostToHugo Use ghostToHugo on your exported Ghost backup from the step above. You may want to adjust the dateformat like I had to ghostToHugo --dateformat \u0026quot;2006-01-02 15:04:05\u0026quot; export.json 4.) Setup Github Pages with your Hugo setup Before we continue, let\u0026rsquo;s test our Hugo setup via hugo server. If there are no significant errors, you should be able to see your blog at http://localhost:1313. If everything looks good, we can finalize the current state and deploy it to Github Pages.\nGithub Pages for your personal website serves HTML files or generates those HTML files for you if your project is a jekyll project. In any case, if you want to run Github Pages for your personal website, you would create a repository that\u0026rsquo;s name follows their scheme: \u0026lt;github_username\u0026gt;.github.io. In my case, that\u0026rsquo;s caffeineflo.github.io. The repository can either be public or private, in any case it will be published under the same address. For personal projects, you need to have your HTML files in the master branch, while your hugo specific files can be anywhere else e.g. another branch or another repository.\nMy intended solution has my hugo files in the sources branch and the html files hugo will generate go into the master branch. This solution will become extra elegant when using the git worktree command to checkout master -\u0026gt; /public and sources to the root / of my caffeineflo.github.io directory.\nHugo will by default generate all your HTML files to /public if you tell it to create your HTML files by issuing hugo. So all we need to do is setup git.\ngit branch sources to create the sources branch where we want to keep our sources git checkout sources to move to the sources branch rm -rf public/ to remove the currently existing public folder git worktree add -B master public origin/master to checkout the master branch to /public git push origin sources Push the current branch rm -rf public/* Note the asterisk. hugo to generate our HTML files in /public cd public git add -A git commit -m \u0026quot;Deleted sources on master and generated HTML files\u0026quot; git push origin master The last step should have generated all necessary HTML files and pushed them to our Github Pages repo. Now if you would navigate to your Github Pages instance, you should see your blog back in old glory again.\nNOTE: Please note that I left out a few basic commands in the process like pushing to master to create the Github Pages instance and/or checking the functionality of our Hugo setup. Please check that again when following this tutorial.\n5.) Reroute iFlorian.com to work with my Github Pages repo One last thing is left to do. Setting our DNS records on our custom domain (iflorian.com) to point to our Github pages site.\ndig caffeineflo.github.io to get the IP Address of the server github hosts us on. Change your A DNS record on our domain to point to the address from the step above. Now depending on how you\u0026rsquo;ve configured your baseurl in your config.toml (btw. you should configure that one \u0026hellip;), you could also set the baseurl to your custom domain and map those domains against each other to be accessible from both domains.\n","permalink":"https://iflorian.com/from-ghost-to-hugo-easier-blog-hosting-with-github-pages/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e📝 Note\u003c/strong\u003e: This post was published in 2017. While Hugo and GitHub Pages remain relevant, some specific tools and approaches mentioned have evolved. Hugo\u0026rsquo;s syntax and GitHub Pages features have improved since publication. This is preserved as historical reference.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWith the publication of this post, my transition from Ghost to Hugo will be complete and this blog will be solely run with static HTML files compared to the dynamic Ghost installation I used before.\nLet me explain why I did this and how you can do this as well.\u003c/p\u003e","title":"From Ghost to Hugo. Easier Blog Hosting with Github Pages"},{"content":"For the past two years I have been riding an electric unicycle and everywhere I go I find people asking me about it, which is why I have decided to put up this page.\nYou might have come here through a link or after we\u0026rsquo;ve spoken in person. Either way, let me introduce you to what an electric unicycle (EUC) is and how you can get started riding one.\nAn electric unicycle is a self-balancing single-wheel vehicle that works similarly to the more popular two-wheeled Segway. It self-balances forward and backward, but unlike a Segway, you must maintain left-to-right balance yourself.\nSteering and acceleration work through the rider leaning forward and backward, similar to a Segway.\nSo much about the theory, but how hard is it to ride one?\nWell, that really depends on a lot of factors but in general everyone should be able to learn how to ride one within one week.\nYoutube offers a lot of great learning videos on how to start, e.g. this one.\nBut which wheel should you get? Well, that\u0026rsquo;s not an easy one but let me try to offer you a few choices:\nThere are three main factors you need to consider before buying your first electric unicycle. Those are:\nBattery Capacity - Maximum Distance (Single Charge) Motor Power - Maximum Speed (Fully Charged) Wheel Size - Terrain Compatibility You should be thinking about these factors when making your choices, here are three options that I would recommend to beginners:\n1. The Ninebot One/Segway One S1 A good beginners wheel is the Ninebot One C/E(+) or the Segway One S1. Segway was acquired by Ninebot a while back and so you\u0026rsquo;re essentially buying from the same company.\nThe wheel delivers the following specs:\n150 - 320 Wh Battery - Up to 24km/14mi range 400 - 500 Watt Motor - Up to 23km/h or 13mi/h 16\u0026quot; Wheel Size - Good for streets and good trails You might be wondering why there\u0026rsquo;s a range on all of these values, that\u0026rsquo;s because there are different models out there. It starts with the Ninebot One C, C+, E and E+ prices range from about $300 to $650 on these and about $600 for the Segway One S1. The more you spend, the higher your max range and max speed are going to be.\nAvailable places to buy are:\nSegway One S1 on Amazon.com Ninebot One E+ on Aliexpress 2. InMotion V8 The InMotion V8 is a good allrounder wheel. While learning to ride on it isn\u0026rsquo;t much harder than on a Ninebot One, it makes sense to buy a wheel with a little higher top speeds from the beginning. This is the wheel if you\u0026rsquo;re okay spending a little more ($800 - $1000) and have a wheel that lasts a long time!\nThe wheel delivers the following specs:\n480 Wh Battery - Up to 45km/28mi range 800 Watt Motor - Up to 30km/h or 18.5mi/h 16\u0026quot; Wheel Size - Good for streets and good trails Available places to buy are:\nInMotion V8 on Aliexpress 3. Gotway MSuper V3 The GotWay MSuper v3 is really one of the top end wheels on the market with top speeds of up to 50kph and ranges far more than you could potentially ride in the beginning. Prices range from $1000 - $2000, but you really get a nice wheel for your money. If you are more of an esthetic person though, this might be not for you as functionality \u0026gt; design with this one.\nThe wheel delivers the following specs:\n680 - 1600 Wh Battery - Up to 68 - 164km range 1500 Watt Motor - Up to 50km/h or 31mi/h 18\u0026quot; Wheel Size - Good for streets and good trails Available places to buy are:\nGotway MSuper v3 on AliExpress Accessory While unicycling really doesn\u0026rsquo;t need much to start with, I would highly recommend to buy a set of protectors and a helmet.\nHere are a few recommendations on what to get:\nProtector Gear Helmet Injuries through crashes are not a joke, so I really recommend investing in some good gear. Even if you\u0026rsquo;re the most careful person, a crash at 30kph will hurt like hell or even mean some more serious injuries.\nI hope this was a little helpful! If you have any questions, feel free to ask me!\nNote: I\u0026rsquo;m not selling these unicycles, though I use affiliate links that provide a small contribution toward hosting this site. If you found this content valuable, please consider using my links. If not, feel free to skip them and send me feedback so I can improve next time!\n","permalink":"https://iflorian.com/euc/","summary":"\u003cp\u003eFor the past two years I have been riding an electric unicycle and everywhere I go I find people asking me about it, which is why I have decided to put up this page.\u003c/p\u003e\n\u003cp\u003eYou might have come here through a link or after we\u0026rsquo;ve spoken in person. Either way, let me introduce you to what an electric unicycle (EUC) is and how you can get started riding one.\u003c/p\u003e\n\u003cp\u003eAn electric unicycle is a self-balancing single-wheel vehicle that works similarly to the more popular two-wheeled Segway. It self-balances forward and backward, but unlike a Segway, you must maintain left-to-right balance yourself.\u003c/p\u003e","title":"Electric Unicycle"},{"content":"Part III This is part III of a series of tutorials that build up on each other. If you missed the first parts, you can find it here: Part 1 Part 2\nIn this part we\u0026rsquo;re going to use the esp8266 chip with the DHT11 sensor from part I to connect to our MQTT server from part II and publish the sensors data. Finally, we are going to build a iOS app to display our data.\nThe first challenge we are going to solve is to connect our existing esp8266 + DHT11 weather station to our MQTT server. Given that we know the IP address of our server (that\u0026rsquo;s your local network address, in my case that\u0026rsquo;s 10.1.10.18) we can use a compatible C library, execute the connect method to connect to our server, subscribe to a topic and publish our data. The MQTT library that I\u0026rsquo;m going to use is going to be the \u0026ldquo;MQTT\u0026rdquo; library from the user 256dpi in the list. You can install it from within your Arduino IDE under Manage Libraries by searching for and installing MQTT by Joël Gähwiler/256dpi. Once you\u0026rsquo;ve done that, you can follow the code sample underneath:\n#include \u0026lt;MQTTClient.h\u0026gt; #include \u0026lt;ArduinoJson.h\u0026gt; #include \u0026lt;ESP8266WiFi.h\u0026gt; #include \u0026lt;DHT.h\u0026gt; #define DHTTYPE DHT11 #define DHTPIN 14 #define WLAN_SSID \u0026#34;YourWifiSSID\u0026#34; #define WLAN_PASSWORD \u0026#34;YourWifiPassword\u0026#34; #define MQTT_SERVER_IP \u0026#34;YourIPAddress\u0026#34; #define TEMPERATURE_TOPIC \u0026#34;weather/temperature\u0026#34; #define HUMIDITY_TOPIC \u0026#34;weather/humidity\u0026#34; DHT dht(DHTPIN, DHTTYPE, 11); WiFiClient wifiClient; MQTTClient mqttClient; float temperature, humidity; unsigned long previousMillis = 0; const long interval = 30000; void connectMQTT() { mqttClient.begin(MQTT_SERVER_IP, 1883, wifiClient); if (mqttClient.connect(\u0026#34;weatherStation\u0026#34;)) { Serial.println(\u0026#34;Connected to MQTT broker\u0026#34;); Serial.println(\u0026#34;Subscribing to topic now\u0026#34;); mqttClient.subscribe(\u0026#34;weather/temperature\u0026#34;); } } void setup() { Serial.begin(115200); delay(10); dht.begin(); Serial.println(); Serial.println(); Serial.print(\u0026#34;Connecting to \u0026#34;); Serial.println(WLAN_SSID); WiFi.mode(WIFI_STA); WiFi.begin(WLAN_SSID, WLAN_PASSWORD); while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\u0026#34;.\u0026#34;); } Serial.println(); Serial.println(\u0026#34;WiFi connected\u0026#34;); Serial.println(\u0026#34;IP address: \u0026#34;); Serial.println(WiFi.localIP()); connectMQTT(); } void loop() { unsigned long currentMillis = millis(); if (currentMillis - previousMillis \u0026gt;= interval) { previousMillis = currentMillis; humidity = dht.readHumidity(); temperature = dht.readTemperature(); if (isnan(humidity) || isnan(temperature)) { Serial.println(\u0026#34;Failed to read from DHT sensor!\u0026#34;); return; } mqttClient.publish(TEMPERATURE_TOPIC, String((int)temperature)); } if (!mqttClient.connected()) { connectMQTT(); } } void messageReceived(String topic, String payload, char * bytes, unsigned int length) { Serial.println(topic); Serial.println(payload); } So what did we code? Let\u0026rsquo;s focus on the methods. Compared to what we did in part I of this series, we\u0026rsquo;ve included the MQTTClient header file so we can use the MQTT library. This gives us the MQTTClient object that we can instantiate and then setup with it\u0026rsquo;s own begin() method. The begin method takes your MQTT\u0026rsquo;s server ip address and your esp8266 WiFiClient as arguments. After this initial setup, we can tell the MQTTClient to connect to the server and subscribe to a topic of our choosing on success of the connection. That is all that is needed for the setup, let\u0026rsquo;s look at the loop() method to see what we have to execute regularly to send data to our MQTT server.\nIn the loop function we have to read the sensor data from our DHT11 sensor. We do this only if our pre-set interval is over, to make sure we don\u0026rsquo;t do this too often eventually running into problems. Once we gathered the data, it is being send off to the server via the publish() method. That is all there is for the loop() function. Outside of that, we will have to add a interface function from our MQTTClient library. That\u0026rsquo;s the messageReceived() function that would be triggered if we would receive MQTT messages.\nPretty straight forward, isn\u0026rsquo;t it?\nIf you upload your updated sketch to your esp8266 now and your server is running, you should see data incoming now. To check the data you\u0026rsquo;re receiving, run mosquitto_sub -v -t 'weather/temperature' in a new terminal window on the same machine that is running your MQTT server.\nNext, we\u0026rsquo;re going to display our data in a small iOS app.\nCreate a new iOS project in Xcode, make it a Single View Application, preferably Objective-C as that\u0026rsquo;s what I\u0026rsquo;m going to use and save the project. Again, we\u0026rsquo;re going to use a MQTT library to make the connection. I\u0026rsquo;ve used this library in the past and it worked well. You can either add it via Carthage or CocoaPods, instructions on how to add the library to your project can be found on the libraries GitHub page. For simplicity reasons I use CocoaPods.\nOnce the library is installed and available within your project, drag two/four labels onto your view and connect the labels with your ViewController.\nAnd then add your code as follows in the implementation of your ViewController:\n#import \u0026#34;ViewController.h\u0026#34; #import \u0026lt;MQTTClient/MQTTClient.h\u0026gt; @interface ViewController () \u0026lt;MQTTSessionDelegate\u0026gt; @property (weak, nonatomic) IBOutlet UILabel *tempValueLabel; @property (weak, nonatomic) IBOutlet UILabel *humidityValueLabel; @end @implementation ViewController - (void)viewDidLoad { [super viewDidLoad]; MQTTCFSocketTransport *transport = [[MQTTCFSocketTransport alloc] init]; transport.host = @\u0026#34;192.168.178.20\u0026#34;; transport.port = 1883; MQTTSession *session = [[MQTTSession alloc] init]; session.transport = transport; session.delegate = self; [session connectAndWaitTimeout:30]; [session subscribeToTopic:@\u0026#34;weather/temperature\u0026#34; atLevel:2 subscribeHandler:^(NSError *error, NSArray\u0026lt;NSNumber *\u0026gt; *gQoss){ if (error) { NSLog(@\u0026#34;Subscription failed %@\u0026#34;, error.localizedDescription); } else { NSLog(@\u0026#34;Subscription sucessfull! Granted Qos: %@\u0026#34;, gQoss); } }]; } - (void)newMessage:(MQTTSession *)session data:(NSData *)data onTopic:(NSString *)topic qos:(MQTTQosLevel)qos retained:(BOOL)retained mid:(unsigned int)mid { NSString *dataString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]; NSLog(@\u0026#34;%@\u0026#34;, topic); NSLog(@\u0026#34;%@\u0026#34;, dataString); self.tempValueLabel.text = dataString; } @end Going through the important parts in the code from top to bottom:\nWe\u0026rsquo;ve added the MQTT library in our ViewController We initialize a transport socket and setup the variables we need to supply so we can connect to the correct server We set the delegate so we can receive MQTT messages from subscribed topics We subscribe to our topic (if you\u0026rsquo;re wondering about atLevel, you can set which QoS level you want to request) And at last we implement the delegate method that is called once we receive a new MQTT message on our MQTT topic that we subscribed to. Build and Run the project, wait until your esp8266 published new data and you should be able to see that your label gets updated.\nNow the last thing to do would be to integrate the temperature data. All we have to do here is add a few simple lines.\nOn the esp8266 project we only have to add this:\nmqttClient.publish(HUMIDITY_TOPIC, String((int)humidity)); For iOS we have to extend to our new topic:\n[session subscribeToTopic:@\u0026#34;weather/humidity\u0026#34; atLevel:2 subscribeHandler:^(NSError *error, NSArray\u0026lt;NSNumber *\u0026gt; *gQoss){}]; And update the label once we receive a message on that topic:\nif (topic == @\u0026#34;weather/humidity\u0026#34;) { self.humidityValueLabel.text = dataString; } if (topic == @\u0026#34;weather/temperature\u0026#34;) { self.tempValueLabel.text = dataString; } As you can see, MQTT is a simplistic protocol by design that is easy to use and implement. There are plenty of libraries for all common systems and technologies that will help you use your data across a variety of devices, but we are not fully done with the series yet. One thing that I really like about it in particular is the publisher/subscriber pattern where you don\u0026rsquo;t have to pull for data but you constantly receive updates!\nIn the last part we\u0026rsquo;re going to look at common use cases of MQTT in a connected home and how you can leverage it in your next project to make your home smarter. Stay tuned for the next episode!\n","permalink":"https://iflorian.com/esp8266-weather-station-part-3/","summary":"\u003ch1 id=\"part-iii\"\u003ePart III\u003c/h1\u003e\n\u003cp\u003eThis is part III of a series of tutorials that build up on each other. If you missed the first parts, you can find it here: \u003ca href=\"https://iflorian.com/esp8266-weather-station-part-1\"\u003ePart 1\u003c/a\u003e \u003ca href=\"https://iflorian.com/esp8266-weather-station-part-2\"\u003ePart 2\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eIn this part we\u0026rsquo;re going to use the esp8266 chip with the DHT11 sensor from part I to connect to our MQTT server from part II and publish the sensors data. Finally, we are going to build a iOS app to display our data.\u003c/p\u003e","title":"Building a ESP8266 Weather Station with MQTT, HomeKit and WebInterface Part III"},{"content":"Thanks for reaching out! The best way to contact me is through LinkedIn. Feel free to connect and send me a message there.\n","permalink":"https://iflorian.com/contact/","summary":"\u003cp\u003eThanks for reaching out! The best way to contact me is through \u003ca href=\"https://www.linkedin.com/in/caffeineflo\"\u003eLinkedIn\u003c/a\u003e. Feel free to connect and send me a message there.\u003c/p\u003e","title":"Contact"},{"content":"Hi Visitor,\nWelcome to my blog/website/notebook! I\u0026rsquo;m glad you are here and I hope you enjoy the content you find here. Here are a few words about me, so you\u0026rsquo;ll get to know who writes all this stuff.\nFlorian Harr iOS Software Engineer in Atlanta I\u0026rsquo;m an iOS Developer in Atlanta! I moved to Atlanta in 2014 right after I finished my Bachelors Degree in Computer Science in Stuttgart, Germany.\nMy move to the United States was inspired by a trip to New York in 2009, and subsequent trips to the US only strengthened my desire to move here. The 2009 trip was made possible by my great friend Heinrich Beck (cousin), who has an excellent blog.\nAfter several visa attempts, getting my Bachelors degree and overcoming all bureaucracies I finally made it.\nFor my current work experience, projects, and professional background, please visit my LinkedIn profile.\nI regularly speak at conferences, teach iOS coding, and get involved with community projects.\nIf you want to get in contact with me, feel free to reach out through LinkedIn.\n","permalink":"https://iflorian.com/about/","summary":"\u003cp\u003eHi Visitor,\u003c/p\u003e\n\u003cp\u003eWelcome to my blog/website/notebook! I\u0026rsquo;m glad you are here and I hope you enjoy the content you find here.\nHere are a few words about me, so you\u0026rsquo;ll get to know who writes all this stuff.\u003c/p\u003e\n\u003ch3 id=\"florian-harr\"\u003eFlorian Harr\u003c/h3\u003e\n\u003ch4 id=\"ios-software-engineer-in-atlanta\"\u003eiOS Software Engineer in Atlanta\u003c/h4\u003e\n\u003cp\u003eI\u0026rsquo;m an iOS Developer in Atlanta! I moved to Atlanta in 2014 right after I finished my Bachelors Degree in Computer Science in Stuttgart, Germany.\u003c/p\u003e","title":"About Me"},{"content":"A week ago I started a new project. I\u0026rsquo;m excited to talk about it as it\u0026rsquo;s coming along nicely.\nA unicycling app!\nI\u0026rsquo;ve been an electric unicycle rider for a bit over a year now and it seems as there\u0026rsquo;s a big problem with all the different brands of EUCs (electric unicycle) that are out there: Their Apps\nWhen riding a electric unicycle, you need an app from time to time to change the settings of your EUC or track your path, battery or any of those metrics. While all EUC brands I\u0026rsquo;ve seen so far provide an app, they come in different levels of usability and each with a different feature set.\nMy latest experience, which happens to be a Inmotion EUC, goes as far as the app being unusable outside China (even though they official sell EUCs outside of China).\nSo what I started to develop is an app that\u0026rsquo;s no longer brand specific and doesn\u0026rsquo;t put unnecessary limitations on the user.\nI\u0026rsquo;ll update this post soon with a few screenshots!\n","permalink":"https://iflorian.com/unicycling-one-app-for-all-eucs/","summary":"\u003cp\u003eA week ago I started a new project. I\u0026rsquo;m excited to talk about it as it\u0026rsquo;s coming along nicely.\u003c/p\u003e\n\u003cp\u003eA unicycling app!\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve been an electric unicycle rider for a bit over a year now and it seems as there\u0026rsquo;s a big problem with all the different brands of EUCs (electric unicycle) that are out there: Their Apps\u003c/p\u003e\n\u003cp\u003eWhen riding a electric unicycle, you need an app from time to time to change the settings of your EUC or track your path, battery or any of those metrics.\nWhile all EUC brands I\u0026rsquo;ve seen so far provide an app, they come in different levels of usability and each with a different feature set.\u003c/p\u003e","title":"Unicycling: One App For All EUCs"},{"content":"If You're Not Paying, You're The Product\n- The Internet\nSome of you might already know Finance Fox - \u0026ldquo;My Insurance Hero\u0026rdquo;. This is going to be a short review with my experience I had using them for about a year now.\nFinance Fox is a platform/app that allows you to manage your insurances and other financial contracts that you might own. They also claim that they can optimize those for you.\nTheir promise/service is that they claim to be your personal, always available broker that handles all your claims, cases and problems you might have with your contracts for you.\nThey work by taking away the mandate from your original agent and cashing in their percentage of your annual fees.\nNot only was their service slow and miserable, it took 1.5 months and more interaction with the insurance compared to dealing with them directly in my test. In addition to that they are also not hiding the fact that they are only interested in your data and your agent\u0026rsquo;s percentage (more to that in a second).\nIn the one claim I filed through Finance Fox I missed a 35€ reimbursement because they didn\u0026rsquo;t file the receipt for my prescriptions correctly and I ended up sorting things out with the insurance myself.\nAfter I moved to the US, I wanted to cancel my traveler\u0026rsquo;s insurance, so I\u0026rsquo;ve sent a message to Finance Fox asking for cancellation of my insurance. It took two messages and 8 weeks to get them to cancel my insurance, when I shortly after canceled the mandate, they deleted all my info, locked me out and told me they won\u0026rsquo;t cancel the insurance now.\nMy verdict, stay away from them as far as you can! The bit more convenience you get is what you\u0026rsquo;ll end up paying with your money!\nTL;DR:\nPro:\nYou get an app to handle your insurance. Con:\nMy personal agent changed four times within one year Your personal agent isn\u0026rsquo;t really the one handling your claims. You really have multiple people handling one claims, so person B might not know what person A did. Once you cancel the mandate you loose all your documents Processing time takes ages ","permalink":"https://iflorian.com/financefox-review/","summary":"\u003cp\u003e\u003ccode\u003eIf You're Not Paying, You're The Product\u003c/code\u003e\u003cbr\u003e\n\u003cem\u003e- The Internet\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eSome of you might already know Finance Fox - \u0026ldquo;My Insurance Hero\u0026rdquo;. This is going to be a short review with my experience I had using them for about a year now.\u003c/p\u003e\n\u003cp\u003eFinance Fox is a platform/app that allows you to manage your insurances and other financial contracts that you might own. They also claim that they can optimize those for you.\u003cbr\u003e\nTheir promise/service is that they claim to be your personal, always available broker that handles all your claims, cases and problems you might have with your contracts for you.\u003c/p\u003e","title":"FinanceFox Review"},{"content":"I was posting about the watchdog device on the raspberry pi a few days ago and how to solve a specific error with the configuration on the pi.\nIn the meantime I had the watchdog device running for a few days and it worked \u0026hellip; kind of \u0026hellip;\nOne should know, that the watchdog devices halts the pi immediately, so it\u0026rsquo;s not a clean shutoff but more like you would pull the power plug of the pi.\nSecond, the defaults that are set in the watchdog config are really not great for the raspberry pi. I\u0026rsquo;ve upped the 15 min max load max-load-15 to 45 and the results weren\u0026rsquo;t too pleasant. Every time the pi had to compile something or do some heavy lifting, the watchdog device would kill my pi. So far not a problem, until I was about to compile another long running job and the pi died in between.\nUpon reboot I got greeted by an emergency boot telling me to run fsck manually. What happened was that the ext4 filesystem badly crashed, beyond the point of repair and my OS setup was gone \u0026hellip;\nSo before setting up the watchdog device on your pi, you should consider checking your max-load values and set them to an appropriate value. Oh and a backup of your data helps too. I had one, from a year ago \u0026hellip; when duply stopped working \u0026hellip;\n","permalink":"https://iflorian.com/update-watchdog-on-the-raspberry-pi/","summary":"\u003cp\u003eI was posting about the watchdog device on the raspberry pi a few days ago and how to solve a specific error with the configuration on the pi.\u003c/p\u003e\n\u003cp\u003eIn the meantime I had the watchdog device running for a few days and it worked \u0026hellip; kind of \u0026hellip;\u003c/p\u003e\n\u003cp\u003eOne should know, that the watchdog devices halts the pi immediately, so it\u0026rsquo;s not a clean shutoff but more like you would pull the power plug of the pi.\u003c/p\u003e","title":"[Update] Watchdog On The Raspberry Pi"},{"content":"Part II This is part II of a series of tutorials that build up on each other. If you missed the first part, you can find it here: Part I\nPart II is going to be a little bit slower than part I, simply because we have to make a few preparations in order to keep going faster again in part III. We\u0026rsquo;re going to take a look at MQTT by going over the idea what this protocol does before we go ahead and setup a MQTT server that we\u0026rsquo;re going to use in part III to communicate with our little weather station.\nMQTT stands for MQ Telemetry Transport and is a lightweight messaging protocol that was build as an easy way to exchange information without much overhead. MQ stands for Message Queueing even though there\u0026rsquo;s actually no message queueing happening. It\u0026rsquo;s been standardized since 2013 as the protocol for IOT devices. The standardization society OASIS (Organization for the Advancement of Structured Information Standards) describes MQTT best as:\n\u0026ldquo;Providing a lightweight publish/subscribe reliable messaging transport protocol suitable for communication in M2M/IoT contexts where a small code footprint is required and/or network bandwidth is at a premium.\u0026rdquo; The protocol functions in a publish-subscribed way where clients, such as sensors and actors, subscribe to a MQTT broker that opens a channel and processes further actions based on the incoming data. Processing on the broker can be really anything, from further publishing the data to other actors to simply displaying data or triggering another server.\nThis function pattern is best displayed in a graph:\nSource: Hivemq\nWith the recent popularity of IOT and MQTT being defacto the main protocol for most IOT applications there\u0026rsquo;s a huge variety of software available. A few examples for MQTT brokers that are free for you to use: Mosquitto, Eclipse Paho, Emitter or emqttd. Most of them are open source with a fairly substantial community backing the software. I decided to go with Mosquitto, as it\u0026rsquo;s one of the more lightweight brokers that\u0026rsquo;s also available for basically any platform out there.\nI\u0026rsquo;m going to install Mosquitto on my MacBook Pro. As a big fan of homebrew, the missing macOS package manager, I\u0026rsquo;m going to use the package they provide for mosquitto.\nTo install Mosquitto with homebrew we only have to run brew install mosquitto and homebrew will do the rest. After the successful installation of mosquitto, homebrew showed us how we can run mosquitto by either executing mosquitto -c /usr/local/etc/mosquitto/mosquitto.conf if we want to run it just now, or brew services start mosquitto if we want to have mosquitto startup now and at restart. I decided to go with the first option, as I don\u0026rsquo;t need mosquitto every day and want to keep control when to launch it. Once we launched it with mosquitto -c /usr/local/etc/mosquitto/mosquitto.conf we want to know if our server works. So we\u0026rsquo;re going to open a channel by subscribing to a new topic and then sending a new message. Here\u0026rsquo;s another screen capture showing you how to do that:\nHere\u0026rsquo;s step by step what we did:\nWe started mosquitto by executing mosquitto -c /usr/local/etc/mosquitto/mosquitto.conf Once mosquitto started and told us that the server is up and running on port 1883, we opened a new tab on the terminal. This is important! Don\u0026rsquo;t close the old one as we want the server to keep running. In our new tab, we issued the following command: mosquitto_sub -v -t 'test/topic'. The -v option gave us some more output (verbose), the -t option did let us choose a topic name. Next, we open another tab and issue mosquitto_pub -t 'test/topic' -m 'helloWorld'. We use -t again to specify the topic and -m for the message. If we go back to our second tab now, we see the messages we\u0026rsquo;ve sent to our topic and if we go back to our first tab, we can see when we connected to our server and when we disconnected. Congratulations! You\u0026rsquo;ve just setup a MQTT server, published a channel/topic and sent MQTT messages to that channel.\nIn the next part of this series we\u0026rsquo;re going to use our weather server to publish sensor data to our MQTT server. Once the data reached the MQTT server, we\u0026rsquo;re going to display the current data and historical data. Stay tuned for the next part of this series!\n","permalink":"https://iflorian.com/esp8266-weather-station-part-2/","summary":"\u003ch1 id=\"part-ii\"\u003ePart II\u003c/h1\u003e\n\u003cp\u003eThis is part II of a series of tutorials that build up on each other. If you missed the first part, you can find it here: \u003ca href=\"https://iflorian.com/esp8266-weather-station-part-1/\"\u003ePart I\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003ePart II is going to be a little bit slower than part I, simply because we have to make a few preparations in order to keep going faster again in part III.\nWe\u0026rsquo;re going to take a look at MQTT by going over the idea what this protocol does before we go ahead and setup a MQTT server that we\u0026rsquo;re going to use in part III to communicate with our little weather station.\u003c/p\u003e","title":"Building a ESP8266 Weather Station with MQTT, HomeKit and WebInterface Part II"},{"content":"Recently I had issues with my VPN setup, specifically with my VPN over at premiumize.me.\nThey seem to have added the block-outside-dns option to their OpenVPN setup. As that\u0026rsquo;s a Windows only question it doesn\u0026rsquo;t work on my OS X/Arch Linux machine and causes problems.\nThe error message was:\nUnrecognized option or missing or extra parameter(s) in [PUSH-OPTIONS]:6: block-outside-dns (2.4.0) You can fix that (given you run OpenVPN \u0026gt;= 2.4.0) by adding the following line to your client config:\npull-filter ignore \u0026#34;block-outside-dns\u0026#34; Done!\n","permalink":"https://iflorian.com/openvpn-block-outside-ds/","summary":"\u003cp\u003eRecently I had issues with my VPN setup, specifically with my VPN over at premiumize.me.\u003c/p\u003e\n\u003cp\u003eThey seem to have added the \u003ccode\u003eblock-outside-dns\u003c/code\u003e option to their OpenVPN setup. As that\u0026rsquo;s a Windows only question it doesn\u0026rsquo;t work on my OS X/Arch Linux machine and causes problems.\u003c/p\u003e\n\u003cp\u003eThe error message was:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eUnrecognized option or missing or extra parameter(s) in [PUSH-OPTIONS]:6: block-outside-dns (2.4.0)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can fix that (given you run OpenVPN \u0026gt;= 2.4.0) by adding the following line to your client config:\u003c/p\u003e","title":"OpenVPN block-outside-dns"},{"content":"Seen that error before?\nPossibly on a Raspberry Pi 2/3?\nGoogle seems to have problems guiding you to the right solution, so here it is:\nAdd watchdog-timeout = 15 to your watchdog.conf file.\nWhy is that? The Broadcom BCM2835 Watchdog timer only supports 15 seconds timeout ;)\n","permalink":"https://iflorian.com/watchdog-cannot-set-timeout-16-errno-22-invalid-argument/","summary":"\u003cp\u003eSeen that error before?\u003cbr\u003e\nPossibly on a Raspberry Pi 2/3?\u003c/p\u003e\n\u003cp\u003eGoogle seems to have problems guiding you to the right solution, so here it is:\u003c/p\u003e\n\u003cp\u003eAdd  \u003ccode\u003ewatchdog-timeout = 15\u003c/code\u003e  to your watchdog.conf file.\u003c/p\u003e\n\u003cp\u003eWhy is that? The Broadcom BCM2835 Watchdog timer only supports 15 seconds timeout ;)\u003c/p\u003e","title":"Watchdog - cannot set timeout 16 (errno = 22 = 'Invalid argument')"},{"content":"I know, I know \u0026hellip; it\u0026rsquo;s a bit late for a review, but here it is!\nFlights:\n2016 was a year that forced me to travel a lot. I gained my H1B which forced me to go places and have me go back and forth.\nI flew 4 times to Atlanta, went to Egypt, Brussels, Rio, Florianopolis, Sao Paulo, Indianapolis, Denver, Milan, Istanbul and Santo Domingo.\nThat\u0026rsquo;s my Flightmap (mostly, I forgot SDQ)\nBasically I flew 62 324 miles or 100 302 km in 2016. Not too bad.\nConferences:\nI spoke at two conferences in 2016\n360iDev - Denver, CO: \u0026ldquo;How To Properly Mentor A Junior Developer\u0026rdquo; Connect.Tech - Atlanta, GA: \u0026ldquo;Continuous Integration for iOS\u0026rdquo; I attended the \u0026ldquo;Release Notes\u0026rdquo; conference in Indianapolis, IN Job:\nI started my current job with Stable|Kernel, actually today is my one year anniversary with them. We moved to Buford, GA (near Atlanta) and rented a great townhouse.\nSo much about 2016! Let\u0026rsquo;s hope for great 2017 with a few more conferences\n","permalink":"https://iflorian.com/2016-my-year-in-review/","summary":"\u003cp\u003eI know, I know \u0026hellip; it\u0026rsquo;s a bit late for a review, but here it is!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFlights:\u003c/strong\u003e\u003cbr\u003e\n2016 was a year that forced me to travel a lot. I gained my H1B which forced me to go places and have me go back and forth.\u003cbr\u003e\nI flew 4 times to Atlanta, went to Egypt, Brussels, Rio, Florianopolis, Sao Paulo, Indianapolis, Denver, Milan, Istanbul and Santo Domingo.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"Flightmap 2016\" loading=\"lazy\" src=\"/images/2017/01/Flightmap.png\"\u003e\nThat\u0026rsquo;s my Flightmap (mostly, I forgot SDQ)\u003c/p\u003e","title":"2016 - My year in review"},{"content":"Part I Today we\u0026rsquo;re going to build something exciting together and you guessed right - it has to do with the Internet of Things.\nAs we do more and more IoT business for our clients, we as software developers also get more and more into the hardware part of the equation. Which is an important part when you truly want to understand and solve a problem.\nTo achieve this and to share my knowledge with you in the best possible way, I made a project that will will help illuminate what\u0026rsquo;s behind IoT. You don\u0026rsquo;t need much hardware to follow along, here\u0026rsquo;s what you need:\nAn ESP8266 Board. I use and recommend a NodeMCU Dev Board. $2-5 from China. $8 Amazon An DHT11/DHT22 Sensor (Humidity + Temperature Sensor). $1 or less from China. $3 Amazon There will be more requirements throughout this series, I will mention them as they come up.\nWhat are we going to build?\nTo start off we\u0026rsquo;re going to build an easy temperature + humidity sensor station, similar to what my colleague Bryan built with an Arduino. Once that is done, the plan is to extend our software by adding MQTT as a communication protocol.\nFinally, we want to integrate all of that with an Amazon Alexa Skill - both with a traditional JSON interface and the MQTT interface so we can clearly see the implementation differences.\nLet\u0026rsquo;s start\nIn this part of the series we\u0026rsquo;re going to attach our temperature and humidity sensor to our ESP8266 module and make the data available over WiFi and HTTP. Before we can do that, let\u0026rsquo;s understand what hardware we got here.\nImage Source: https://blog.squix.org\nThe module in question here is a NodeMCU v2 Board. The version 2 of this board utilizes a ESP8266 12E wifi chip. The ESP8266 12E is, as all the ESP chips in this series, a low cost WiFi chip that comes with either a 80 or 160 MHz CPU and 64/96 KiB Memory for instructions and data. Per design, these chips have at least 16 GPIO pins and most of them feature an integrated antenna traced on the PCB. The 12E version, I will be using also features 20 GPIO pins and a 4MB Flash.\nNow that we\u0026rsquo;ve talked about the ESP chip, what about the NodeMCU board? What are all these components around the ESP chip for?\nWell, it\u0026rsquo;s similar to an Arduino board - a microcontroller can\u0026rsquo;t do much without components that allow other components to interface with it. Therefore the NodeMCU board adds a USB to Serial chip that allows direct programming of the ESP chip as well as a proper power supply for the chip and attached components. You could say that the NodeMCU board isn\u0026rsquo;t really necessary, but it\u0026rsquo;s certainly making our lifes easier as we won\u0026rsquo;t have to stick all these components together on a breadboard.\nThe DHT11 is probably the most widely used temperature and humidity sensor that there is. The sensor works with both 5V and 3.3V, has three pins (VCC, GND and DATA) and can measure temperatures from 0-50°C (32-122°F) with an error of ± 2°C (3.6°F) and Humidity from 20-90% RH with an error of ± 5% RH. The data pin is a digital interface; we don\u0026rsquo;t have to convert an analog voltage into degrees.\nI won\u0026rsquo;t cover the basics of the Arduino IDE (Arduino.app) since my colleague Bryan already has in a great post of his, but I will show you quickly how you can use the NodeMCU board or any of the ESP8266 chips with the Arduino IDE. The Arduino IDE opened up a while back to 3rd party libraries, allowing 3rd parties to integrate their modules with the Arduino IDE. Some might say it was already possible before that happened and yes, that\u0026rsquo;s true, but it was a hack and used undocumented ways.\nIn order to use your ESP8266 module with the Arduino IDE, open the Library Manager under Tools -\u0026gt; Boards:... -\u0026gt; Boards Manager ... -\u0026gt; Filter: ESP8266. From there, the IDE should filter your search results down to one entry \u0026ldquo;esp8266 by ESP8266 Community\u0026rdquo;. Click on that field and click on \u0026ldquo;Install\u0026rdquo;.\nNow you are able to select your NodeMCU module from the Tools section in the Arduino IDE and set the port and baud you\u0026rsquo;re using. CPU and Flash Size can be left as the IDE suggest it in most cases, Baud will most likely be 115200.\nWiring\nThe wiring is pretty straight forward with a NodeMCU module.\nNodeMCU/ESP8266 DHT11 3V3 VCC GND GND D5(or any Dx) DATA If you\u0026rsquo;re using anything else than a NodeMCU module, you would have to adjust the DATA pin to your needs depending on what USB to Serial solution you are using. Feel free to ask (with sufficient information) in the comments if you\u0026rsquo;re having trouble on the wiring.\nNow that everything is wired, we can go on to program the ESP8266 to read and provide the DHT11\u0026rsquo;s data as JSON and text over HTTP.\nWe\u0026rsquo;re going to use 4 different libraries for that: DHT Sensor Library, ArduinoJson, ESP8266Wifi and ESP8266WebServer (both should be built-in). You can install all of those with the Library Manager under Sketch -\u0026gt; Include Library -\u0026gt; Library Manager ....\nCreate a new Arduino Sketch and copy the following code into the sketch:\n#include \u0026lt;ArduinoJson.h\u0026gt; #include \u0026lt;ESP8266WiFi.h\u0026gt; #include \u0026lt;ESP8266WebServer.h\u0026gt; #include \u0026lt;DHT.h\u0026gt; #define DHTTYPE DHT11 #define DHTPIN 14 #define WLAN_SSID \u0026#34;\u0026#34; #define WLAN_PASSWORD \u0026#34;\u0026#34; DHT dht(DHTPIN, DHTTYPE, 11); ESP8266WebServer server(80); float temperature, humidity; unsigned long previousMillis = 0; const long interval = 2000; void setup() { Serial.begin(115200); delay(10); dht.begin(); humidity = dht.readHumidity(); temperature = dht.readTemperature(); Serial.println(); Serial.println(); Serial.print(\u0026#34;Connecting to \u0026#34;); Serial.println(WLAN_SSID); WiFi.mode(WIFI_STA); WiFi.begin(WLAN_SSID, WLAN_PASSWORD); while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(\u0026#34;.\u0026#34;); } Serial.println(); Serial.println(\u0026#34;WiFi connected\u0026#34;); Serial.println(\u0026#34;IP address: \u0026#34;); Serial.println(WiFi.localIP()); server.on(\u0026#34;/dht11\u0026#34;, HTTP_GET, [](){ unsigned long currentMillis = millis(); if (currentMillis - previousMillis \u0026gt;= interval) { previousMillis = currentMillis; humidity = dht.readHumidity(); temperature = dht.readTemperature(); if (isnan(humidity) || isnan(temperature)) { Serial.println(\u0026#34;Failed to read from DHT sensor!\u0026#34;); return; } } String webString = \u0026#34;Humidity \u0026#34; + String((int)humidity) + \u0026#34;% Temperature: \u0026#34; + String((int)temperature) + \u0026#34; C\u0026#34;; Serial.println(webString); server.send(200, \u0026#34;text/plain\u0026#34;, webString); }); server.on(\u0026#34;/dht11.json\u0026#34;, [](){ unsigned long currentMillis = millis(); if (currentMillis - previousMillis \u0026gt;= interval) { previousMillis = currentMillis; humidity = dht.readHumidity(); temperature = dht.readTemperature(); if (isnan(humidity) || isnan(temperature)) { Serial.println(\u0026#34;Failed to read from DHT sensor!\u0026#34;); return; } Serial.println(\u0026#34;Reporting \u0026#34; + String((int)temperature) + \u0026#34;C and \u0026#34; + String((int)humidity) + \u0026#34; % humidity\u0026#34;); } StaticJsonBuffer\u0026lt;500\u0026gt; jsonBuffer; JsonObject\u0026amp; root = jsonBuffer.createObject(); root[\u0026#34;temperature\u0026#34;] = temperature; root[\u0026#34;humidity\u0026#34;] = humidity; String jsonString; root.printTo(jsonString); Serial.println(jsonString); server.send(200, \u0026#34;application/json\u0026#34;, jsonString); }); server.begin(); Serial.println(\u0026#34;HTTP server started! Waiting for clients!\u0026#34;); } void loop() { server.handleClient(); } Before you can upload and test the code, there are a few things you have to adjust for your WiFi settings and a few things I would like to explain.\nFirst, you want to change Line 7 with the pin you used to connect your DHT11 Data line to your ESP8266. If you have been using D5 as I suggested in the wiring section, 14 is the correct number here. For everything else, see NodeMCU Pinout. Also, if you are using a DHT22, which also works, change the line just above that to DHT22. Second, you want to add your wifi settings in line 9 + 10 where it says WLAN_SSID and WLAN_PASSWORD. Put your WiFi SSID in between the quotation marks.\nThis should get you going. Go ahead and upload the sketch to your NodeMCU. We\u0026rsquo;re going to give it a test run before I continue explaining what you\u0026rsquo;ve just uploaded to your NodeMCU and ran on your WiFi\u0026hellip;\nNow that you\u0026rsquo;ve uploaded the sketch to your module, it should automatically connect to your wifi and you can access it with any web browser. To get your module\u0026rsquo;s IP address, either use the Serial Monitor under Tools in the Arduino IDE and watch for the \u0026ldquo;IP Address: \u0026hellip;\u0026rdquo; output, or scan your network (e.g. with fing). Once you have the IP address, go ahead and put it in your browser\u0026rsquo;s address bar add /dht11 behind the address, hit enter, and you should be getting DHT11 sensor data on your screen.\nThat was easy, wasn\u0026rsquo;t it?\nThere\u0026rsquo;s one more endpoint you can query, that\u0026rsquo;s /dht11.json. The data you just saw is also available formatted in the JSON format, so that we could pick it up with possible clients.\nHow would we do it?\nLet\u0026rsquo;s have a look over the interesting parts of the sketch. Again, I won\u0026rsquo;t go over the things that have been covered before, therefore I will spare you details on how we\u0026rsquo;ve read from the DHT11 sensor and we go straight ahead to checkout the ESP/Wifi stuff.\nESP8266WebServer server(80); First we have to initialize our server by creating a server handle with the port number as argument. As we\u0026rsquo;re going to use HTTP, we\u0026rsquo;re going to use port 80.\nNext, we want to tell the ESP which mode to run. That\u0026rsquo;s going to be station infrastructure mode for us (WIFI_STA) and then we can begin to connect to our Wifi network.\nWiFi.mode(WIFI_STA); WiFi.begin(WLAN_SSID, WLAN_PASSWORD); After that we wait until we have a valid connection by checking on the status of our wifi module WiFi.status() != WL_CONNECTED.\nOnce we have all of this initial setup done, we can register endpoints with instructions for what to do when we hit each endpoint. The method is pretty straight forward server.on(const char *uri, HTTPMethod method, THandlerFunction fn), so all we need to provide is a URI for the endpoint this should refer to, tell it which HTTP method to respond to and a handler function.\nIn our case, we call this method like this for the \u0026quot;/dht11\u0026quot; endpoint:\nserver.on(\u0026#34;/dht11\u0026#34;, HTTP_GET, [](){ unsigned long currentMillis = millis(); if (currentMillis - previousMillis \u0026gt;= interval) { previousMillis = currentMillis; humidity = dht.readHumidity(); temperature = dht.readTemperature(); if (isnan(humidity) || isnan(temperature)) { Serial.println(\u0026#34;Failed to read from DHT sensor!\u0026#34;); return; } } String webString = \u0026#34;Humiditiy \u0026#34; + String((int)humidity) + \u0026#34;% Temperature: \u0026#34; + String((int)temperature) + \u0026#34; C\u0026#34;; Serial.println(webString); server.send(200, \u0026#34;text/plain\u0026#34;, webString); }); Using \u0026quot;/dht11\u0026quot; as the path, we want this method to respond to HTTP_GET requests and we simply read temperature and humidity from the dht11 sensor, put the results in a string and we send it back as \u0026quot;text/plain\u0026quot; with a status code of 200 to the requesting client.\nThe JSON endpoint is not very different, here\u0026rsquo;s the code:\nserver.on(\u0026#34;/dht11.json\u0026#34;, [](){ // ... DHT11 Sensor read has been removed to focus on the JSON part StaticJsonBuffer\u0026lt;500\u0026gt; jsonBuffer; JsonObject\u0026amp; root = jsonBuffer.createObject(); root[\u0026#34;temperature\u0026#34;] = temperature; root[\u0026#34;humidity\u0026#34;] = humidity; String jsonString; root.printTo(jsonString); Serial.println(jsonString); server.send(200, \u0026#34;application/json\u0026#34;, jsonString); }); All we have to do to create our JSON output is to create a buffer and allocate it to the right size. I chose 500 B, which is more than we need. On top of that buffer we create a JsonObject and add both the temperature and humidity as keys with their respective values. Before we can send it back to the client, we have to convert our Json object into a compatible format for our send command and then we send it off with the proper Content-Type header.\nWe end the setup() function with a server.begin() command and we go over to configure the loop() function.\nThis one is pretty easy, we just have to issue a server.handleClient() call as all we want to do once the module loops is to make sure that we handle incoming client requests.\nAnd that\u0026rsquo;s it! That\u0026rsquo;s basically all the code needed to have a mobile temperature and humidity station that is providing all the data over HTTP.\nIn the next episode in this series we\u0026rsquo;re going to implement MQTT and we\u0026rsquo;re going to look at multiple solutions on how we can visualize our MQTT data and use it.\nIf you had any problems in this post along the way, feel free to post your questions in the comments. Otherwise see you for episode 2.\n","permalink":"https://iflorian.com/esp8266-weather-station-part-1/","summary":"\u003ch1 id=\"part-i\"\u003ePart I\u003c/h1\u003e\n\u003cp\u003eToday we\u0026rsquo;re going to build something exciting together and you guessed right - it has to do with the Internet of Things.\u003c/p\u003e\n\u003cp\u003eAs we do more and more IoT business for our clients, we as software developers also get more and more into the hardware part of the equation. Which is an important part when you truly want to understand and solve a problem.\u003c/p\u003e\n\u003cp\u003eTo achieve this and to share my knowledge with you in the best possible way, I made a project that will will help illuminate what\u0026rsquo;s behind IoT. You don\u0026rsquo;t need much hardware to follow along, here\u0026rsquo;s what you need:\u003c/p\u003e","title":"Building a ESP8266 Weather Station with MQTT, HomeKit and WebInterface Part I"},{"content":"\nWith BlackFriday and CyberMonday just behind us, a lot of us have received strange iCloud calendar invites like I did.\nWe didn\u0026rsquo;t ask for that and certainly it\u0026rsquo;s annoying as they have no value to anyone.\nWhy did we receive those invites? Spammers are sending emails out to email addresses they scraped off of google search results or to email addresses they know from breaches or data they bought. With iClouds ability to auto convert special encoded emails into calendar invites you\u0026rsquo;ll never see the actual email they sent you, but only the annoying calendar invite.\nAccept, Maybe, Decline All calendar invites give you the option to respond to those invites, either accepting or declining them. Yet, doing that results in a response to the sender which will help them verifying that your email address is actually active. Something you definitely don\u0026rsquo;t want as you want to prevent future spam from happening.\nPrevent and stop the spam First, we want to delete all those invites. We do that by adding a calendar to our account, move all the annoying invites in there and then delete the calendar. Follow these steps to do so:\nCreate a new Calendar in your Calendar App Name it whatever you like Go to your calendar invites Click on one of the invites Click on the calendar field of the invite Select your newly created calendar Go back and repeat steps 3-6 for the remaining invites Go back to the overview of your calendars Tip on the (i) of your spam calendar Click \u0026ldquo;Delete Calendar\u0026rdquo; Confirm That deletes those invites without further notice to the spammer\nPrevention To prevent this from happening in the future you\u0026rsquo;ll have to change a setting in your iCloud account. Simply login on iCloud.com with your iCloud account, go to the calendar, click the gear icon in the bottom left corner, go to the Advanced tab. Search for the Receive event invitations as: field. It\u0026rsquo;s probably set to In-app notifications right now, switch that to Email to your@email.com\nThis will prevent future invites from popping up as those invites won\u0026rsquo;t be converted automatically anymore and will show up as normal emails which should get filtered out by most spam filters!\nNo more M-K handbags that nobody wants!\n","permalink":"https://iflorian.com/how-to-delete-and-prevent-spam-icloud-calendar-invites/","summary":"\u003cp\u003e\u003cimg alt=\"iCloud Calendar Invites\" loading=\"lazy\" src=\"/images/2016/11/IMG_1864.png\"\u003e\u003c/p\u003e\n\u003cp\u003eWith BlackFriday and CyberMonday just behind us, a lot of us have received strange iCloud calendar invites like I did.\u003cbr\u003e\nWe didn\u0026rsquo;t ask for that and certainly it\u0026rsquo;s annoying as they have no value to anyone.\u003c/p\u003e\n\u003ch2 id=\"why-did-we-receive-those-invites\"\u003eWhy did we receive those invites?\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"iCloud Spam Invites\" loading=\"lazy\" src=\"/images/2016/11/IMG_1865.PNG\"\u003e\nSpammers are sending emails out to email addresses they scraped off of google search results or to email addresses they know from breaches or data they bought.\nWith iClouds ability to auto convert special encoded emails into calendar invites you\u0026rsquo;ll never see the actual email they sent you, but only the annoying calendar invite.\u003c/p\u003e","title":"How to Delete and Prevent Spam iCloud Calendar Invites"},{"content":"I recently had a few problems with signing my apps due to some Xcode 8 changes, mainly the difference between using PROVISIONING_PROFILE_SPECIFIER and PROVISIONING_PROFILE to specify your provisioning profile.\nThere are wonderful blog posts out there that describe the process in detail, here\u0026rsquo;s what I found important:\nPROVISIONING_PROFILE_SPECIFIER setting is used to indicate the type of signing method that should be used for a given target. Targets that want to employ the manual method of code signing will not use this setting, and will instead use the deprecated PROVISIONING_PROFILE build setting. If the setting is set then, the new automatic code signing method will take over.\nSource: pewpewthespells\nThe name set in PROVISIONING_PROFILE_SPECIFIER has to match your provisioning profiles name. Not the filename, not the UUID, the actual name set under the \u0026lt;key\u0026gt;Name\u0026lt;/key\u0026gt; in your provisioning profile. Nothing else, to the best of my knowledge and my tests, there\u0026rsquo;s not magic matching happening, just a string comparison! Source: Testing//FizzBuzz Project\n","permalink":"https://iflorian.com/xcode-8-provisioning_profile_specifier/","summary":"\u003cp\u003eI recently had a few problems with signing my apps due to some Xcode 8 changes, mainly the difference between using \u003ccode\u003ePROVISIONING_PROFILE_SPECIFIER\u003c/code\u003e and \u003ccode\u003ePROVISIONING_PROFILE\u003c/code\u003e to specify your provisioning profile.\u003c/p\u003e\n\u003cp\u003eThere are wonderful blog posts out there that describe the process in detail, here\u0026rsquo;s what I found important:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ePROVISIONING_PROFILE_SPECIFIER\u003c/code\u003e setting is used to indicate the type of signing method that should be used for a given target. Targets that want to employ the manual method of code signing will not use this setting, and will instead use the deprecated \u003ccode\u003ePROVISIONING_PROFILE\u003c/code\u003e build setting. If the setting is set then, the new automatic code signing method will take over.\u003cbr\u003e\nSource: \u003ca href=\"https://pewpewthespells.com/blog/migrating_code_signing.html\"\u003epewpewthespells\u003c/a\u003e\u003c/p\u003e","title":"Xcode 8: PROVISIONING_PROFILE_SPECIFIER"},{"content":" ⚠️ Archived Content: This post was published in 2016 and is now considered historical documentation. Many tools and services mentioned (xctool, HockeyApp, Travis CI\u0026rsquo;s free tier) are deprecated or no longer available. The workflows described do not reflect current best practices. This is preserved for reference purposes only. For modern CI/CD approaches, consult current documentation for GitHub Actions, GitLab CI, or contemporary CI/CD platforms.\nDeployment With all those scripts behind us, we should get a signed IPA in our OUTPUTDIR. From here on, we can use this IPA and distribute it to our testers. A few options are to either upload our IPA with curl to a custom FTP Directory or our XCode Server or some other custom routine. For this example we stay \u0026ldquo;simple\u0026rdquo; and upload our App to HockeyApp via curl.\nHockeyApp HockeyApp is a similar service to TestFlight which offers many options to distribute and test your apps. They offer their own SDK which enables automatic crash reports, analytics and feedback functions in addition to have different user groups for our beta/production builds.\nTo use HockeyApp, we have to add HOCKEY_APP_ID and HOCKEY_APP_TOKEN to Travis\u0026rsquo;s global env variables. You can find Hockey\u0026rsquo;s App ID on your overview page and you can create your Hockey App Token on your settings page. You should add both variables through the travis gem again, to have those encrypted.\nflorian$: travis encrypt \u0026#34;HOCKEY_APP_ID=APP_ID\u0026#34; florian$: travis encrypt \u0026#34;HOCKEY_APP_TOKEN=APP_TOKEN\u0026#34; Add the encrypted variables to your .travis.yml, we need them in our curl command to upload our IPAs to HockeyApp.\nThe next step and final step is to add one last bash script ipa-upload.sh. Create a bash script next to your other Travis Scripts with the following content:\n# file: $SCRIPT_FOLDER/ipa-upload.sh #!/bin/sh if [[ \u0026#34;$TRAVIS_PULL_REQUEST\u0026#34; != \u0026#34;false\u0026#34; ]]; then echo \u0026#34;This is a pull request. No deployment will be done.\u0026#34; exit 0 fi if [[ \u0026#34;$TRAVIS_BRANCH\u0026#34; != \u0026#34;master\u0026#34; ]]; then echo \u0026#34;Testing on a branch other than master. No deployment will be done.\u0026#34; exit 0 fi OUTPUTDIR=\u0026#34;$PWD/build/TravisCI-Release-iphoneos\u0026#34; RELEASE_DATE=`date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;` RELEASE_NOTES=\u0026#34;Build: $TRAVIS_BUILD_NUMBER Uploaded: $RELEASE_DATE\u0026#34; if [ ! -z \u0026#34;$HOCKEY_APP_ID\u0026#34; ] \u0026amp;\u0026amp; [ ! -z \u0026#34;$HOCKEY_APP_TOKEN\u0026#34; ]; then if [ \u0026#34;$TRAVIS_TAG\u0026#34; == \u0026#34;\u0026#34; ] \u0026amp;\u0026amp; [ \u0026#34;$TRAVIS_BRANCH\u0026#34; == \u0026#34;master\u0026#34; ]; then echo \u0026#34;\u0026#34; echo \u0026#34;***************************\u0026#34; echo \u0026#34;* Uploading to Hockeyapp *\u0026#34; echo \u0026#34;***************************\u0026#34; curl https://rink.hockeyapp.net/api/2/apps/$HOCKEY_APP_ID/app_versions \\ -F status=\u0026#34;2\u0026#34; \\ -F notify=\u0026#34;0\u0026#34; \\ -F notes=\u0026#34;$RELEASE_NOTES\u0026#34; \\ -F notes_type=\u0026#34;0\u0026#34; \\ -F tags=\u0026#34;beta\u0026#34; \\ -F ipa=\u0026#34;@$OUTPUTDIR/$APP_NAME.ipa\u0026#34; \\ -F dsym=\u0026#34;@$OUTPUTDIR/$APP_NAME.app.dSYM.zip\u0026#34; \\ -H \u0026#34;X-HockeyAppToken: $HOCKEY_APP_TOKEN\u0026#34; fi if [[ \u0026#34;$TRAVIS_TAG\u0026#34; == \u0026#34;production\u0026#34; ]]; then echo \u0026#34;\u0026#34; echo \u0026#34;***************************\u0026#34; echo \u0026#34;* Uploading to Hockeyapp *\u0026#34; echo \u0026#34;***************************\u0026#34; curl https://rink.hockeyapp.net/api/2/apps/$HOCKEY_APP_ID/app_versions \\ -F status=\u0026#34;2\u0026#34; \\ -F notify=\u0026#34;0\u0026#34; \\ -F notes=\u0026#34;$RELEASE_NOTES\u0026#34; \\ -F notes_type=\u0026#34;0\u0026#34; \\ -F tags=\u0026#34;production\u0026#34; \\ -F ipa=\u0026#34;@$OUTPUTDIR/$APP_NAME.ipa\u0026#34; \\ -F dsym=\u0026#34;@$OUTPUTDIR/$APP_NAME.app.dSYM.zip\u0026#34; \\ -H \u0026#34;X-HockeyAppToken: $HOCKEY_APP_TOKEN\u0026#34; fi fi Put it in place in the \u0026lsquo;after_success:\u0026rsquo; build phase after your \u0026lsquo;ipa-signing.sh\u0026rsquo; script.\nBe sure to check out the IF conditions within the ipa-signing.sh script. They are currently setup to tag releases in HockeyApp differently according to their git tag. The idea behind this is simply to have two different groups of users in HockeyApp. One group for beta users and one group for production users, just add tags to your users on HockeyApp so they get access to the corresponding releases. \u0026lsquo;Beta\u0026rsquo; and \u0026lsquo;Production\u0026rsquo; for your super users which should get access to both release types and \u0026lsquo;Production\u0026rsquo; only for those who should be able to get the production release. Now all you need to do is to submit your give a specific commit the \u0026lsquo;production\u0026rsquo; tag to make it a production release on HockeyApp.\nTroubleshooting At this point of our tutorial it\u0026rsquo;s quite likely that you ran into at least one problem as you don\u0026rsquo;t have an interactive shell to test your commands. When writing this tutorial this happened to me quite often so my GIT History ended up being a mess especially as you can\u0026rsquo;t always use pull requests to test your changes.\nA great option to test changes would be a Virtual Machine which holds the same environment as the one Travis CI does, unfortunately that\u0026rsquo;s not an option as Travis doesn\u0026rsquo;t provide their configuration in a format such as a Vagrant script. So the only remaining possible option to test your scrips are actually local tests in your local terminal.\nIf that doesn\u0026rsquo;t help, it\u0026rsquo;s always an option to use \u0026rsquo;echo\u0026rsquo; and \u0026lsquo;set -x\u0026rsquo; to print your variables to your Travis CI build log.\nIt\u0026rsquo;s quite unfortunate that there\u0026rsquo;s no other option, but that\u0026rsquo;s probably an action from Travis\u0026rsquo;s side to protect their property. If you ever happen to run into serious problems or something you can\u0026rsquo;t reproduce, the Travis Support is normally reacting on a pretty fast basis trying to help where they can. They\u0026rsquo;re also more than happy to provide you with a debug VM on their servers for tough problems if you\u0026rsquo;re a paying customer.\nA step further With all these options and great tweaks outlined, there\u0026rsquo;s still plenty of room for other extensions. Travis CI offers a bunch of custom which I encourage you to test them. One of my favorite extensions are actually Travis\u0026rsquo;s notification options. You can easily integrate your favorite chat clients to announce a new version on channels such as IRC, Campfire or Slack. Or another option to extend your scripts are custom webhooks which are supported by Travis to even go a step further than a simple notification.\nIn addition to those extensions on Travis\u0026rsquo;s side, there are similar projects such as coverall.io which measures your test coverage history and statistics through their integration with your CI server. These are all ways that help to manage your code and to give you a better insight.\nSummary Automated building, testing and deployment more popular every day and is a great way for many developers to ensure their software still builds against different systems. Many open source projects started to adopt that years ago and you might already have seen buttons such as the well known build: success button.\nTravis CI makes standard setups a lot easier than other products such as Jenkins where the work of maintaining a server is added on top of your configuration. Therefore I encourage you to try Travis CI as it\u0026rsquo;s free for public repositories without having to maintain your own copy of XCode on your private server.\nI have setup a special repository here which holds all the code covered in this tutorial, check the releases tab to find different versions of what we covered here. It\u0026rsquo;s setup to work with subfolder and both options on where to store your certificates. Just set the bash variables at the begging of the .travis.yml file according to your structure and check filenames to match your certificates and you should be up and running in no time!\nGo ahead and start using Continuous Integration! It\u0026rsquo;s a fun ride and a good workflow to work with.\n![Successful Build]({{ site.baseurl }}/img/blog/2014/12/Successul_build-TravisCI.png)\n","permalink":"https://iflorian.com/continuous-deployment-with-travis-ci-and-hockeyapp-part-3/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e⚠️ Archived Content\u003c/strong\u003e: This post was published in 2016 and is now considered \u003cstrong\u003ehistorical documentation\u003c/strong\u003e. Many tools and services mentioned (xctool, HockeyApp, Travis CI\u0026rsquo;s free tier) are deprecated or no longer available. The workflows described do not reflect current best practices. This is preserved for reference purposes only. For modern CI/CD approaches, consult current documentation for GitHub Actions, GitLab CI, or contemporary CI/CD platforms.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"deployment\"\u003eDeployment\u003c/h2\u003e\n\u003cp\u003eWith all those scripts behind us, we should get a signed IPA in our OUTPUTDIR. From here on, we can use this IPA and distribute it to our testers. A few options are to either upload our IPA with curl to a custom FTP Directory or our XCode Server or some other custom routine. For this example we stay \u0026ldquo;simple\u0026rdquo; and upload our App to HockeyApp via curl.\u003c/p\u003e","title":"Continuous Deployment with Travis CI and HockeyApp, Part 3"},{"content":" ⚠️ Archived Content: This post was published in 2016 and is now considered historical documentation. Many tools and services mentioned (xctool, HockeyApp, Travis CI\u0026rsquo;s free tier) are deprecated or no longer available. The workflows described do not reflect current best practices. This is preserved for reference purposes only. For modern CI/CD approaches, consult current documentation for GitHub Actions, GitLab CI, or contemporary CI/CD platforms.\nWe are going to pick up where we left off in part one of this series, with our minimal setup using xctool which built our app on Travis CI.\nApp Signing In the process of creating a valid .ipa package and to deploy our app to a physical device, we need to sign our app with a bunch of certificates and package it. Packaging is the process where the compiled binary, assets and meta files are bundled into an app container (.ipa) to be installed on a device. Getting the right certificates and using the right procedures to sign your binary and create your .ipa is known to be difficult. Here we\u0026rsquo;re going to explain one approach that should work for everyone.\nIn this first section I will cover the process of obtaining the right certificates, and using them to sign our ipa. We will create some scripts for the signing process so that our release builds can be used. There will also be a part which covers how to encrypt your certificates in case you\u0026rsquo;re on a public repository or want an additional level of security. In addition, I\u0026rsquo;m introducing the solution I came up with for a corporate setting — a certificate git repo which gets pulled from Travis so that you don\u0026rsquo;t need to store your certificates in your project\u0026rsquo;s repo.\nSigning Certificates To sign and package our app we need two certificates and a provisioning profile: The Apple WorldWide Certificate, an iPhone Distribution Certificate along with its corresponding private key, and the iOS Provisioning Profile.\n1. The Apple WorldWide Certificate\nYou can either download it here or export it from your Keychain. Save it somewhere in your repo, and remember the location as we need the path for our signing scripts.\n2. iPhone Distribution Certificate (App Store or Ad Hoc)\nNow we need a distribution certificate. To get a new one, go to the Apple Developer Program Website and create one. You\u0026rsquo;ll find everything you need under \u0026lsquo;Certificates \u0026gt; Production \u0026gt; Add \u0026gt; App Store or Ad Hoc\u0026rsquo;. This gives you the option to download your iPhone Distribution Certificate.\nIf you\u0026rsquo;ve downloaded and installed the certificate before or if you want to use an existing one from your machine, open your Keychain Access application (Applications \u0026gt; Utilities \u0026gt; Keychain Access) and export the certificate. The naming in your keychain will most likely be like: \u0026ldquo;iOS Distribution: Company Name or Developer Name\u0026rdquo;.\nNote: Make sure that you only select the iPhone Distribution Certificate and NOT the combined certificate with the private key. A combined certificate would have a little \u0026ldquo;drop-down\u0026rdquo; arrow on the left where unfolding would show you the corresponding private key underneath. If that\u0026rsquo;s the case, unfold it and only select the certificate.\nRight-Click on the certificate and choose \u0026lsquo;Export\u0026rsquo;. The target file format for this certificate will be \u0026lsquo;.cer\u0026rsquo;. You should save it at the same place where you saved the Apple WorldWide Certificate.\n3. iPhone Distribution Certificate Signing Identity - Private Key\nNext you need your private key. The private key normally has the name of the developer which signed for the iPhone Distribution Certificate. In our case the certificates name is \u0026lsquo;Aaron Hillegass\u0026rsquo; marked as private key in the \u0026lsquo;kind\u0026rsquo; column.\nGo through the Export steps explained above for the iPhone Distribution Certificate. The target file format for this certificate will be \u0026lsquo;.p12\u0026rsquo;. Feel free to use any password you like, though keep in mind that this is all parsed through bash later, so spaces can give you a hard time later.\n4. iOS Provisioning Profile\nThe last file we need is the iOS Provisioning Profile. You can create a Provisioning Profile at Apples Developer Program Member site. Go to \u0026lsquo;Provisioning Profile \u0026gt; Distribution \u0026gt; Add \u0026gt; Ad Hoc\u0026rsquo; or \u0026lsquo;In House\u0026rsquo; and create your profile. When creating the profile you can either set a specific Bundle Identifier so your Provisioning Profile will only work with that Identifier, or you\u0026rsquo;re going to specify an Identifier with an asterisk \u0026lsquo;*\u0026rsquo; to match more than one Identifier. Save it next to your other files in your repository. It\u0026rsquo;s helpful to install this locally, but not necessary for our CI setup.\nEncryption The next step before we can finally modify our script again and sign our app, is to decide if you want to encrypt your certificates or if you want a custom solution for them. As mentioned before there are three ways to go from here.\nFirst, you can simply store your certificates unencrypted in your repo. If so, you can skip this paragraph. Note: This is only recommended if your repo is private and you don\u0026rsquo;t fear any security breach.\nSecond, you can store your certificates in a special repo and pull the certificates once Travis needs them. That\u0026rsquo;s a nice setting if you have a whole bunch of apps or if you want to skip the step of acquiring the certificates every time. This works well with a provisioning profile that\u0026rsquo;s not attached to a specific bundle identifier. Plus, you can store your certificates there either encrypted or unencrypted depending on security concerns of your repository. If so, read along and apply this paragraph to a detached repo instead of this repo.\nThird, you can store your certificates encrypted in your projects repo.\nTo start with the encryption process, I want to introduce the Travis gem, a command line tool which helps you encrypt variables and files. The Travis gem can be installed through \u0026lsquo;gem install Travis\u0026rsquo; on your local machine, given ruby is present. Given we need to add the personal key to Travis\u0026rsquo;s environment when signing the app, we need to store the password you just set in step 3 when acquiring the signing identity. Travis uses the repos private ssh key to encrypt your secrets. Therefore, we want to create a variable which holds the encrypted representation of the password we used to export the signing identity.\nType in the following into your terminal. Make sure your working directory is your repositories root (\u0026lsquo;cd myRepsitories/Repository\u0026rsquo; with your paths first):\nflorian$: travis encrypt \u0026#34;PRIVATE_KEY_PASSWORD=YOURPASSWORD\u0026#34; Please add the following to your .travis.yml file: secure: \u0026#34;S0HplSFd3pYqfxtAk8s2OAcMW8K6Cdp0UesjIZJ2PupDWEOheYqReaGVBmaMOwHICEis+yV5VYjrX3d/n3jS/A3yqO1YlfynOp3zMtHAlnH5vw7ESUc152lpU/ShqbU9ENZey0DM1dTi8CzC6OyvLXcj5E94zUD4iQ/zClQYg=\u0026#34; Note: Make sure to replace YOURPASSWORD with the actually password you\u0026rsquo;ve used in step three above.\nThis command will give you an encrypted version of your env variable, which you should add to your .travis.yml. This environment variable will be decrypted once travis runs your scripts. If you want the travis gem to add this line automatically to your configuration file, add the \u0026lsquo;\u0026ndash;add\u0026rsquo; option to the travis encrypt command. NOTE: I advice you to add it manually as the travis gem \u0026ndash;add option will run your configuration file through a LINT verification which sometimes breaks your configuration file. This is why we didn\u0026rsquo;t use that option.\nYou can add this variable in your configuration file under the \u0026rsquo;env:\u0026rsquo; key specifying \u0026lsquo;global:\u0026rsquo; visibility.\nNote: Any additional variables are added the same way.\n# file: .travis.yml language: objective-c env: global: - secure: TifeGWADNrRjp6yjiMHPaiUEXppOlRKh04bLrkpzNzC8hIkNCQgNFBGOC5ewSvHDdK1VJLPNsjaP74lTifeGWADNrRjp6yjiMHPaiUEXppOlRKh04bLrkpzNzC8hIkNCQgNFBGOC5ewSvHDdK1VJLPNsjaP74l The next thing we have to do is to encrypt the actual certificates. The Travis gem provides an encrypt-file option, that unfortunately doesn\u0026rsquo;t work for certain filetypes, which you will recognize once your build fails. Therefore we\u0026rsquo;re going to encrypt our files manually using openssl and a set password. We\u0026rsquo;re going to use \u0026lsquo;AppSigningMadness\u0026rsquo; as our password.\nOpenssl is invoked on the command line like this:\nopenssl [cipher_type] -k [password] -in \u0026lt;FileToEncrypt\u0026gt; -out \u0026lt;FileEncrypted\u0026gt; -a florian$: openssl aes-256-cbc -k \u0026#34;AppSigningMadness\u0026#34; -in repo/certfolder/ContinuousDistributionExample.mobileprovision -out repo/certfolder/ContinuousDistributionExample.mobileprovision.enc -a florian$: openssl aes-256-cbc -k \u0026#34;AppSigningMadness\u0026#34; -in repo/certfolder/iOS_Distribution_Certificate.cer -out repo/certfolder/iOS_Distribution_Certificate.cer.enc -a florian$: openssl aes-256-cbc -k \u0026#34;AppSigningMadness\u0026#34; -in repo/certfolder/private_key.p12 -out repo/certfolder/private_key.p12.enc -a Note: Make sure to change AppSigningMadness to a password of your choice and replace the example paths here with actual paths to your certificates on your machine.\nSome of you might bring up at this point that we don\u0026rsquo;t necessarily need to encrypt our Provisioning Profile and our Distribution Certificate as only the private key is what needs to be treated top secret. While this is basically true, there are cases where you don\u0026rsquo;t want to expose the UUIDs in your Provisioning Profile and you might want to hide the information in your Distribution Certificate. In addition to this, we\u0026rsquo;ve decided for the sake of this beginner tutorial to encrypt all our certificates and provisioning profiles for the sake of getting the practice and to be better safe than sorry.\nWe don\u0026rsquo;t have to encrypt the Apple WorldWide Certificate as it\u0026rsquo;s publicly available anyway. After openssl has finished its work, you\u0026rsquo;ll get a {Certificate}.cer.enc version, which is the encrypted version of these files. Be careful which version you\u0026rsquo;re going to check in with git as you only want to check in the encrypted version. If this info comes too late for you, you might want to check out BFG Repo-Cleaner to remove that sensitive information again.\nAgain we\u0026rsquo;re going to use a bash variable to store the password we used with openssl to encrypt our files. Since we don\u0026rsquo;t want to store our password in clear text, we\u0026rsquo;re encrypting it again with our travis gem.\nMBP: florian$: travis encrypt \u0026#34;OPENSSL_PASSWORD=YOURPASSWORD\u0026#34; Please add the following to your .travis.yml file: secure: \u0026#34;S0HplSFd3pYqfxtAk8s2OAcMW8K6Cdp0UesjIZJ2PupDWEOheYqReaGVBmaMOwHICEis+yV5VYjrX3d/n3jS/A3yqO1YlfynOp3zMtHAlnH5vw7ESUc152lpU/ShqbU9ENZey0DM1dTi8CzC6OyvLXcj5E94zUD4iQ/zClQYg=\u0026#34; Add the secure variable to your configuration file and you\u0026rsquo;re almost done with the encryption part. The last remaining part of the encryption process is actually the decryption so travis can use our certificates. Add the decryption commands to your .travis.yml in the before_install phase:\n# file: .travis.yml before_install: - sudo gem install cocoapods - brew update - if brew outdated | grep -qx xctool; then brew upgrade xctool; fi - openssl aes-256-cbc -k \u0026#34;$OPENSSL_PASSWORD\u0026#34; -in repo/certfolder/ContinuousDistributionExample.mobileprovision.enc -d -a -out repo/certfolder/ContinuousDistributionExample.mobileprovision - openssl aes-256-cbc -k \u0026#34;$OPENSSL_PASSWORD\u0026#34; -in repo/certfolder/iOS_Distribution_Certificate.cer.enc -d -a -out repo/certfolder/iOS_Distribution_Certificate.cer - openssl aes-256-cbc -k \u0026#34;$OPENSSL_PASSWORD\u0026#34; -in repo/certfolder/private_key.p12.enc -d -a -out repo/certfolder/private_key.p12 You\u0026rsquo;re all set in terms of encryption now! The section underneath is not necessary if you store your certificates in your project\u0026rsquo;s repository (which is most likely what you want to do if this is your first Travis setup).\nUsing a Certificate Repo Attention: This is an optional step that is only mentioned as an additional option if you have many apps that share the same certificates.\nIn case you are working at a large company or have a bunch of apps that are usually signed with the same certificates, it might be advisable to setup a reusable solution for your certificates. I use a designated repo that holds all our certificates, distribution profiles, and everything necessary for the signing process. Providing these in a private repository to developers makes their setup easier when configuring a new project. Using this certificate repository in the Travis CI lifecycle is then straightforward—you only need to run git clone when Travis needs your certificates.\nAll you need to do is:\nAdd the git clone command before you decrypt your certificates (if you store them encrypted) in the \u0026lsquo;before_install\u0026rsquo; phase, and remember that by default you\u0026rsquo;re working directory is the root of your git repository. So when issuing the git clone command, make sure to choose a relative path and adjust the path to your certificates in your openssl commands then.\ngit clone git@github.com:User/repo.git ./ios-distribution To access your repo in case it\u0026rsquo;s a private repo, you can either give travis a private ssh key through one of the following bash scripts, or you can add a designated ssh key in Travis\u0026rsquo;s webinterface under Settings \u0026gt; SSH Key (This feature is only available with a Pro plan).\nBash Scripts To finally put all pieces of the puzzle together, we need to add a few scripts which do the hard work for us. We\u0026rsquo;re going to add four scripts in total: add-keys.sh, update-bundle.sh, ipa-signing.sh and delete-keys.sh and invoke them in our .travis.yml.\nBefore we start with add-keys.sh, I want to introduce a few variables to your .travis.yml so some of the logic in the following scripts makes sense. This is also a good chance if you want to do a quickstart or catch up with what we did before, as the code snippet underneath can be used to start from scratch.\nPut the following into your .travis.yml file:\n# file: .travis.yml env: global: # Set this to your Apps Name - APP_NAME=\u0026#34;ContinuousDistributionExample\u0026#34; # That\u0026#39;s your XCode Scheme\u0026#39;s name, most likely that\u0026#39;s the same as your App Name. *Xcode -\u0026gt; Product -\u0026gt; Scheme* - XCODE_SCHEME=\u0026#34;$APP_NAME\u0026#34; # That\u0026#39;s your XCode Unit Test Scheme\u0026#39;s name, most likely the only difference is a Test suffix to your main scheme - UNIT_TEST_SCHEME=\u0026#34;ContinuousDistributionExampleTests\u0026#34; # Fill in your iPhone Distribution Certificate name in here (not the filename, the name shown in your Keychain access). Check with QuickLook (tap space in finder on the file). - \u0026#39;DEVELOPER_NAME=\u0026#34;iPhone Distribution: Florian Harr\u0026#34;\u0026#39; # This has to change if your project is in a subfolder. Trailing slash is required for this to work - PROJECT_DIRECTORY=\u0026#34;$PWD/\u0026#34; # The folder relative to your project root where your scripts are. No trailing slash here - SCRIPT_FOLDER=\u0026#34;travis-scripts\u0026#34; # The folder relative to your project root where your ios-certs are. No trailing slash here. Leave this empty and specify your repo in the add script, if you did the extra step and you\u0026#39;re using the git certificates solution. - CERT_FOLDER=\u0026#34;ios-certs\u0026#34; # That\u0026#39;s the standard location for your Info.plist where your Version Number and such things are located. - INFO_PLIST=\u0026#34;$PROJECT_DIRECTORY/$APP_NAME/$APP_NAME/$APP_NAME-Info.plist\u0026#34; Note: Please see the comments for what you have to fill in.\nNow let\u0026rsquo;s start with the first bash script \u0026lsquo;add-keys.sh\u0026rsquo;. Add this script either to a specific travis-script folder that you might want to create in the repo, or to the folder you specified in the variable \u0026lsquo;$SCRIPT_FOLDER\u0026rsquo;.\n# file: $SCRIPT_FOLDER/add-keys.sh #!/bin/sh # Print Software Version echo \u0026#34;***************************\u0026#34; echo \u0026#34;* Software *\u0026#34; echo \u0026#34;***************************\u0026#34; echo \u0026#34;Cocoapods version is\u0026#34; pods --version echo \u0026#34;XCTool version is\u0026#34; xctool -v # Create custom Keychains echo \u0026#34;***************************\u0026#34; echo \u0026#34;* Adding Keys *\u0026#34; echo \u0026#34;***************************\u0026#34; if [ \u0026#34;$CERT_FOLDER\u0026#34; == \u0026#34;\u0026#34; ]; then # Get the right certificate from GitHub git clone git@github.com:User/repo.git ./ios-distribution CERT_FOLDER = \u0026#34;ios-distribution\u0026#34; fi # Create a custom keychain security create-keychain -p travis ios-build.keychain # Make the custom keychain default, so xcodebuild will use it for signing security default-keychain -s ios-build.keychain # Unlock the keychain security unlock-keychain -p travis ios-build.keychain # Set keychain timeout to 1 hour for long builds # see http://www.egeek.me/2013/02/23/jenkins-and-xcode-user-interaction-is-not-allowed/ security set-keychain-settings -t 3600 -l ~/Library/Keychains/ios-build.keychain # Add certificates to keychain and allow codesign to access them security import ./$CERT_FOLDER/AppleWorldwide.cer -k ~/Library/Keychains/ios-build.keychain -T /usr/bin/codesign security import ./$CERT_FOLDER/iOS_Distribution_Certificate.cer -k ~/Library/Keychains/ios-build.keychain -T /usr/bin/codesign security import ./$CERT_FOLDER/private_key.p12 -k ~/Library/Keychains/ios-build.keychain -P \u0026#34;$PRIVATE_KEY_PASSWORD\u0026#34; -T /usr/bin/codesign # Put the provisioning profile in place mkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles cp ./$CERT_FOLDER/Provisioning_Profile.mobileprovision ~/Library/MobileDevice/Provisioning\\ Profiles/ In the script above, we\u0026rsquo;re creating a custom keychain with a lifetime of one hour, which should be enough for Travis to use the certificates. Then, we import all our certificates including the private key, using our encrypted PRIVATE_KEY_PASSWORD env variable again. Add the add-keys.sh script to your \u0026lsquo;before_script:\u0026rsquo; phase in your .travis.yml by issuing \u0026lsquo;- ./$SCRIPT_FOLDER/add-keys.sh\u0026rsquo;.\nSet the execution rights for this script by executing chmod a+x travis-scripts/add-keys.sh. *This applies to all further .sh files as well.\nThe next step is to sign the app, but before we do that, we have to invoke xctool to create a build for us which we can sign later on. We create a build with the \u0026lsquo;Release\u0026rsquo; configuration for the iphoneos SDK and we specify a OBJROOT and SYMROOT path so we know where the binary is located at. You can add this command to your \u0026lsquo;script\u0026rsquo; phase in your .travis.yml, which looks like this:\nxctool -workspace $PROJECT_DIRECTORY$APP_NAME.xcworkspace -scheme $XCODE_SCHEME -sdk iphoneos -configuration Release OBJROOT=${PROJECT_DIRECTORY%/}/build SYMROOT=${PROJECT_DIRECTORY%/}/build ONLY_ACTIVE_ARCH=NO # ONLY_ACTIVE_ARCH=NO is a build settin we set here to make sure we build the actual app for all architectures and devices we could possibly have. You can add additional build settings at the end of this command. Next is the ipa-signing.sh script which we\u0026rsquo;ll use to code sign our app and embed the Provisioning Profile.\n# file: $SCRIPT_FOLDER/ipa-signing.sh #!/bin/sh if [[ \u0026#34;$TRAVIS_PULL_REQUEST\u0026#34; != \u0026#34;false\u0026#34; ]]; then echo \u0026#34;This is a pull request. No deployment will be done.\u0026#34; exit 0 fi if [[ \u0026#34;$TRAVIS_BRANCH\u0026#34; != \u0026#34;master\u0026#34; ]]; then echo \u0026#34;Testing on a branch other than master. No deployment will be done.\u0026#34; exit 0 fi PROVISIONING_PROFILE=\u0026#34;$HOME/Library/MobileDevice/Provisioning Profiles/Provisioning_Profile.mobileprovision\u0026#34; OUTPUTDIR=\u0026#34;$PROJECT_DIRECTORY/build/Release-iphoneos\u0026#34; echo \u0026#34;***************************\u0026#34; echo \u0026#34;* Signing *\u0026#34; echo \u0026#34;***************************\u0026#34; xcrun -log -sdk iphoneos PackageApplication \u0026#34;$OUTPUTDIR/$APP_NAME.app\u0026#34; -o \u0026#34;$OUTPUTDIR/$APP_NAME.ipa\u0026#34; -sign \u0026#34;$DEVELOPER_NAME\u0026#34; -embed \u0026#34;$PROVISIONING_PROFILE\u0026#34; This script is a bit heavy for now, but worth explaining. The first two if conditions are checking if you\u0026rsquo;re either on a pull request or on a branch other than master, as it is pointless to sign a build with changes which haven\u0026rsquo;t made it into master yet. After that the signing process is happening through \u0026lsquo;xcrun\u0026rsquo;. Make sure to change the $PROVISIONING_PROFILE (only the name of the profile, not the path) in case you named your Provisioning Profile file different from Provisioning_Profile.mobileprovision.\nChmod the ipa-signing.sh script again and add it to your .travis.yml in the \u0026lsquo;after_success:\u0026rsquo; phase.\nThe next script is the delete-keys.sh script, which will remove our custom keychain once we\u0026rsquo;re done with our certificates.\n# file: $SCRIPT_FOLDER/delete-keys.sh #!/bin/sh security delete-keychain ios-build.keychain rm -f ~/Library/MobileDevice/Provisioning\\ Profiles/Provisioning_Profile.mobileprovision Add this script to the \u0026lsquo;after_script:\u0026rsquo; phase, which will be executed whether if your build succeeded or not.\nThe last script we\u0026rsquo;re going to add is the update-bundle.sh script we skipped earlier.\n# file: $SCRIPT_FOLDER/update-bundle.sh #!/bin/sh # Updating Plist Information for deployment echo \u0026#34;***************************\u0026#34; echo \u0026#34;* Updating Bundle *\u0026#34; echo \u0026#34;***************************\u0026#34; /usr/libexec/PlistBuddy -c \u0026#34;Set :CFBundleVersion $TRAVIS_BUILD_NUMBER\u0026#34; \u0026#34;$INFO_PLIST\u0026#34; echo \u0026#34;Set CFBundleVersion to $TRAVIS_BUILD_NUMBER\u0026#34; This script will change our CFBundleVersion to match the current Travis Build Number. This is nice as it gives you a trackable history when we later ship the app through HockeyApp. Add this script to the \u0026lsquo;before_script:\u0026rsquo; phase. Don\u0026rsquo;t forget to chmod a+x for this script as well.\nWith all these scripts in place, your \u0026lsquo;.travis.yml\u0026rsquo; should be similar to this:\n# file: .travis.yml before_install: - sudo gem install cocoapods - brew update - if brew outdated | grep -qx xctool; then brew upgrade xctool; fi before_script: - ./travis-scripts/add-key.sh - ./travis-scripts/update-bundle.sh script: - xctool -workspace ContinuousDistributionExample.xcworkspace -scheme ContinuousDistributionExample -sdk iphonesimulator - xctool -workspace ContinuousDistributionExample.xcworkspace -scheme ContinuousDistributionExample -sdk iphoneos -configuration Release OBJROOT=$PWD/build SYMROOT=$PWD/build ONLY_ACTIVE_ARCH=NO - xctool test -workspace ContinuousDistributionExample.xcworkspace -scheme ContinuousDistributionExampleTests -sdk iphonesimulator after_success: - ./travis-scripts/ipa-signing.sh after_script: - ./travis-scripts/delete-keys.sh To summarize and make sure you have everything, your scripts folder should contain the following:\n- add-keys.sh - update-bundle.sh - ipa-signing.sh - delete-keys.sh Adjusting your XCode Project Settings Now it might seems that you\u0026rsquo;re done at this point, but unfortunately there are two small options and a \u0026lsquo;glitch\u0026rsquo; in the tooling that keeps us from completing the code signing process.\nThe first part is to set the right credentials for the \u0026lsquo;Release\u0026rsquo; configuration set on your XCode Project. Go to your Project Settings -\u0026gt; Build Settings -\u0026gt; Code Signing and set the profile you are providing Travis to sign your app for the \u0026lsquo;Release\u0026rsquo; configuration. In a bug free world, we wouldn\u0026rsquo;t have to do this, but unfortunately there\u0026rsquo;s a little glitch we have to work around.\nAs of writing this, Xcode 6.3.2 is the latest version, and the signing process is undergoing some changes. Some signing process options are in transition, which is why we also need to adjust another option to ensure the code signing succeeds.\nThat said, we need to change the value for the \u0026lsquo;Code Signing Resource Rules Path\u0026rsquo; option to be \u0026lsquo;$(SDKROOT)/ResourceRules.plist\u0026rsquo;. That\u0026rsquo;s something you normally shouldn\u0026rsquo;t have to do, we just do it here to avoid getting problems with xcrun.\nYou can now push your changes to GitHub and check if everything works.\nAs before in Part 1, you can find a version of what we introduced here in our repo. The \u0026rsquo;local-signing\u0026rsquo; version is a bit more advanced than what we covered here, but similar in nature.\nComing Up In the next and last part of this series we\u0026rsquo;re going to cover how to make use of your signed application bundles and upload them to HockeyApp. Stay tuned for the third part!\n","permalink":"https://iflorian.com/continuous-deployment-with-travis-ci-and-hockeyapp-part-2/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e⚠️ Archived Content\u003c/strong\u003e: This post was published in 2016 and is now considered \u003cstrong\u003ehistorical documentation\u003c/strong\u003e. Many tools and services mentioned (xctool, HockeyApp, Travis CI\u0026rsquo;s free tier) are deprecated or no longer available. The workflows described do not reflect current best practices. This is preserved for reference purposes only. For modern CI/CD approaches, consult current documentation for GitHub Actions, GitLab CI, or contemporary CI/CD platforms.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWe are going to pick up where we left off in part one of this series, with our minimal setup using xctool which built our app on Travis CI.\u003c/p\u003e","title":"Continuous Deployment with Travis CI and HockeyApp, Part 2"},{"content":" ⚠️ Archived Content: This post was published in 2016 and is now considered historical documentation. Many tools and services mentioned (xctool, HockeyApp, Travis CI\u0026rsquo;s free tier) are deprecated or no longer available. The workflows described do not reflect current best practices. This is preserved for reference purposes only. For modern CI/CD approaches, consult current documentation for GitHub Actions, GitLab CI, or contemporary CI/CD platforms.\nFull disclosure: I wrote this about 1-1.5yrs ago for another company but haven\u0026rsquo;t updated it yet. There\u0026rsquo;s a good chance some stuff is broken, I apologize for that and promise to fix it within the next days ;)\nContinuous integration has become an important topic and a significant part of a developer’s workflow. Finding bugs and ensuring a stable codebase are among the most important benefits of using continuous integration. While these benefits are huge on their own, we can extend our continuous integration setup to actually deploy new builds of our application to our testers. We call this extended setup continuous deployment.\nFor most app developers, setting up an Xcode server and all of the necessary requirements to run a CI server are more of a hassle and a distraction than anything else. There are a couple of alternatives available to this approach, one of them being Travis-CI, a cloud-based continuous integration solution that conveniently takes away the hassle to setup a server.\nIn this series of tutorials, I would like to show you how to set up an existing Xcode project with Travis CI for automated builds. Later on, I’ll show you how to automatically distribute your builds using HockeyApp. Let’s dive right in, starting with Travis CI. The only thing you need in order to follow along is an Xcode project hosted on GitHub.\nIntroducing Travis CI Travis CI is basically a virtual machine provider, which gives us a Mac OS X machine with a software stack on top that includes the latest Xcode, Ruby and homebrew. The complete list of available gems, software and commands can be found in the Travis CI docs.\nTo begin setting up Travis CI, you first need an account. Fortunately, Travis can use your GitHub account and you’re done with that part in one click. Go to travis-ci.org, click on Sign in with GitHub in the upper right corner and log in with your GitHub Account.\nOnce you’re logged in with your GitHub account, Travis shows you your latest CI build in the form of a dashboard. The navigation is divided into three parts. The left sidebar displays your active CI projects with some quick info, the header above gives you some navigation possibilities with your personal settings on the right, and the main area in the center shows your currently selected CI project with the latest build log under the Current tab.\nSettings for your selected CI project are available through the gear icon on the upper right side, next to the build passing/failed/unknown’ button. All the information here is synchronized with GitHub, so new pushes lead to a new build under Build History,’ and any errors or simple logging output can be found in the Terminal-style dark box when you select a build.\nThere’s also an option to build your private repositories, though that’s a feature included only in paid plans, as the free plan is meant to support open source projects. Private repositories are configured through travis-ci.com.\nGet Your Repo Up to Speed Once your repositories are fetched, you can enable your project for use with Travis by using the “ON/OFF” slider. Once you do that, Travis will start building the project even though Travis might not know how to properly do so just yet. I prefer to hold off Travis when no configuration file is available, by selecting “Build only if .travis.yml is present” in the project settings.\nTo do so, click on the + sign in the left sidebar, make sure your desired identity is selected and then activate your repository on the right by using the ON/OFF slider. Next, click on the wrench symbol next to the switch and you’ll get redirected to your project’s settings page. Activate the \u0026ldquo;Build only if .travis.yml is present\u0026rdquo; option.\nThis brings us to the core configuration of Travis, the .travis.yml file. All settings, instructions and customized routines are set through Travis’s .travis.yml file, which has to be placed in your repository’s root. Therefore, we go forward and create an empty file with the name .travis.yml in our repository’s root, so Travis continues to build our project.\nNote that you might not see this file through your file explorer, as most operating systems hide files with a dot prefix. Go ahead and commit that file to your repo, and Travis will continue to build it. Either use your favorite text editor or use cd {yourRepositoriy/Path/} | touch .travis.yml to create an empty .travis.yml file in your repo. Commit and push to GitHub. You can and should check the existence of your .travis.yml on your GitHub’s overview page, as shown in the screenshot below.\nNote: Travis\u0026rsquo;s configuration file follows YAML syntax, which is sensitive to indentation. When writing the configuration file, be sure to use spaces instead of tab characters for indentation. Additionally, be mindful that any commands with whitespace will be parsed through bash, so proper quoting is important.\nShared Xcode Schemes Before we move along to the actual build process, we have to configure our project in Xcode to make our build targets available on the server. So far, the build targets have been created automatically, but that doesn’t happen on the server. To make our targets available on the server, we have to declare them as Shared targets. To do this, open your project in Xcode, click on the project’s name next to the Build \u0026amp; Run Button, where you normally select your deployment target, and select Manage Schemes. You should have at least two targets, one for your actual app and one for your Unit Test target as shown in the screenshot above. If not, go ahead and create them either through the + Button or the Autocreate Schemes Now Button.\nCommit and push to GitHub. Make sure that your commit contains your shared scheme. It’s a common mistake for people to exclude the shared scheme through their .gitignore.\nUnder the Hood At this point, you might ask yourself what Travis performs to build your project. As mentioned before, Travis is basically a VM provider and lets you modify its routine through bash scripts in order to build your projects. It’s no wonder that Travis uses Xcode’s command line tools to perform all actions on your project. The main command is xcodebuild, which is invoked with some basic parameters. The basic pattern goes like this:\nxcodebuild -project {XCodeproject.xcodeproj} -scheme {SchemeNem} -sdk {SDKname} In our specific case, that command would look like this:\nxcodebuild -project ContinuousDistributionExample.xcodeproj -scheme ContinuousDistributionExample -sdk iphonesimulator The required parameters are -project {Path to your .xcodeproj}, -scheme {Your projects scheme name} and -sdk {SDK name} If you have a Xcode workspace instead of a project, exchange the -project parameter for a -workspace parameter. As with most, if not all, of the commands shown here, you can test these commands locally before testing them on Travis CI. For this specific command, just open your terminal and navigate with cd into your repository and execute the same xcodebuild command. That way, you can see if your command works, and if there are any typos or other problems.\nA lot could be said here about how to use xcodebuild, but as there are more advanced tools that work as a wrapper to xcodebuild, we’re going to move along and use xctool to replace it. In any case, you should make sure that your Xcode command line tools are working and up to date. You can check that by performing xcode-select –version in your terminal.\n###The Basic Setup Now that you know how the xcodebuild command works, let’s start using it with Travis CI. Modify the contents of your .travis.yml to match this code snippet, while making the appropriate customizations for your parameters:\n# file: .travis.yml language: objective-c script: - xcodebuild -project ContinuousDistributionExample.xcodeproj -scheme ContinuousDistributionExample -sdk iphonesimulator Travis CI defines a minimal configuration for an Objective-C project to have the keys language, xcode_project and xcode_scheme defined. If you try to use these, Travis will use your project’s default settings, which have a high chance to fail on Travis CI without prior changes. Commit the file, and push your changes to your GitHub repo. If you put in the correct names and paths and you committed your configuration back to GitHub, Travis CI should start building your project. Make sure that the build passes at this point, so we can customize our routine from here. You can tell that your build is passing from either the log by clicking on the Build History tab, or after refreshing the website from the build: status button at the upper right section.\nXCTool xctool is a wrapper for Apple’s xcodebuild, which we were using before. The main purpose for switching from xcodebuild to xctool is to make it easier to build and invoke unit tests, as well as to have a wrapper around xcodebuild to make general usage easier. Therefore we make the transition to xctool. xctool is available through homebrew. I recommend installing it on your local machine. If you have homebrew installed, open Terminal and execute brew update \u0026amp;\u0026amp; brew install xctool to install it on your local machine. xctool can be used with the following parameters:\nxctool -workspace {Path.xcworkspace} -scheme {SchemeName} -sdk {SDK} XCtool also automatically compiles your CocoaPods if they are part of your workspace. For our example project, the build command looks like this:\nxctool -workspace ContinuousDistributionExample.xcworkspace -scheme ContinuousDistributionExample -sdk iphonesimulator Similar to the parameters xcodebuild uses, again, if you have a project instead of a workspace, replace -workspace with -project. To run our unit tests we use this command:\nxctool test -workspace ContinuousDistributionExample.xcworkspace -scheme ContinuousDistributionExampleTests -sdk iphonesimulator Now we need to put these commands in the right place within our .travis.yml file. Travis has a special build lifecycle that requires us to use the script section for this purpose. Change your .travis.yml file to look like this:\n# file: .travis.yml language: objective-c script: - xctool -workspace ContinuousDistributionExample.xcworkspace -scheme ContinuousDistributionExample -sdk iphonesimulator - xctool test -workspace ContinuousDistributionExample.xcworkspace -scheme ContinuousDistributionExampleTests -sdk iphonesimulator Note that if your Xcode project lives in a subfolder in your repo, be sure to give the full path from your repository’s root, such as ContinuousDistributionExample/ContinuousDistributionExample.xcworkspace. The . notation for the current folder to use relative paths doesn’t work here and will result in errors. Make sure to apply this to all paths in a subfolder through the course of this series. If you need to use absolute paths, you can use the $PWD env variable to get your current working directory, then expand the path further from there.\nUpdating Software \u0026amp;\u0026amp; Dependencies As mentioned before, Travis CI provides the CocoaPods gem within their OS X environment. If you put your Podfile in the same directory as your .travis.yml file in your project’s repo, Travis will automatically install all your pods without any further configuration. We want to make sure we have the latest version of CocoaPods and other software we’re using, so let’s use this spot in the build lifecycle to update Cocoapods and xctool. Travis CI recommends using their before_install: hook to execute these commands. Add this code snippet to the end of your .travis.yml file:\n# file: .travis.yml before_install: - sudo gem install cocoapods - brew update - if brew outdated | grep -qx xctool; then brew upgrade xctool; fi Commit and push your changes. Travis should make a new build. Make sure everything works and your builds are passing by consulting Build History-\u0026gt;Build. Note: We want to upgrade xctool only if it’s outdated, because the chances that we’ll run into some brew link errors are quite high. While writing this post, I ran into a few problems with outdated software and iOS 8 due to recent releases of iOS and Xcode. If you get an error on Travis CI and not on your local machine, check the version numbers and consider updating to the same version. If you want to check your results at this point or just get a preconfigured version, you can check out the minimal version.\nCongratulations—you just integrated your first project using Travis CI! It should automatically build now and let you know once a commit breaks the building process.\nIn the next part of this series, we’re going to set up code signing on Travis CI so that we can deploy our releases later on\n","permalink":"https://iflorian.com/continuous-deployment-with-travis-ci-and-hockeyapp-part-1/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e⚠️ Archived Content\u003c/strong\u003e: This post was published in 2016 and is now considered \u003cstrong\u003ehistorical documentation\u003c/strong\u003e. Many tools and services mentioned (xctool, HockeyApp, Travis CI\u0026rsquo;s free tier) are deprecated or no longer available. The workflows described do not reflect current best practices. This is preserved for reference purposes only. For modern CI/CD approaches, consult current documentation for GitHub Actions, GitLab CI, or contemporary CI/CD platforms.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eFull disclosure:\u003c/strong\u003e I wrote this about 1-1.5yrs ago for another company but haven\u0026rsquo;t updated it yet. There\u0026rsquo;s a good chance some stuff is broken, I apologize for that and promise to fix it within the next days ;)\u003c/p\u003e","title":"Continuous Deployment with Travis CI and HockeyApp, Part 1"},{"content":"I\u0026rsquo;ve been to ReleaseNotes last week. ReleaseNotes is a indie conference mainly centered around the topic on \u0026ldquo;How to build a business\u0026rdquo;.\nThe conference was superb! But more to that later.\nOne talk that I\u0026rsquo;ve heard there last week already came back to me, which I like to write about now:\n@sh\u0026rsquo;s talk \u0026ldquo;How to improve at support as a developer\u0026rdquo;\nThe talk centered around the language you use when facing customers and what impact it has between talking like a human being or some neutral robot. Now I won\u0026rsquo;t be able to capture in writing how awesome the talk was or what a great speaker Sarah Hatter is, but I want you to profit from the talk, so let me refer you to @bsndesign\u0026rsquo;s notes to said talk:\nAfaik there\u0026rsquo;s going to be a recording of her talk soon, once it\u0026rsquo;ll be available, I will make sure to post it here.\nUntil then, make sure to think about the language you use and how you communicate. You change the world around you with the words you use, don\u0026rsquo;t be a robot. \u0026ldquo;I was under the impression\u0026rdquo; is not an excuse, when you made a mistake be sure to recognize it and don\u0026rsquo;t leave the other person just like that.\nThat said, the language you use matters! Be friendly and \u0026ldquo;try to think how other people think\u0026rdquo;.\n","permalink":"https://iflorian.com/business-your-language-matters/","summary":"\u003cp\u003eI\u0026rsquo;ve been to \u003ca href=\"https://releasenotes.tv/conference/\"\u003eReleaseNotes\u003c/a\u003e last week. ReleaseNotes is a indie conference mainly centered around the topic on \u0026ldquo;How to build a business\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eThe conference was superb! But more to that later.\u003c/p\u003e\n\u003cp\u003eOne talk that I\u0026rsquo;ve heard there last week already came back to me, which I like to write about now:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://twitter.com/sh\"\u003e@sh\u003c/a\u003e\u0026rsquo;s talk \u0026ldquo;How to improve at support as a developer\u0026rdquo;\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThe talk centered around the language you use when facing customers and what impact it has between talking like a human being or some neutral robot.\nNow I won\u0026rsquo;t be able to capture in writing how awesome the talk was or what a great speaker Sarah Hatter is, but I want you to profit from the talk, so let me refer you to \u003ca href=\"https://twitter.com/bsndesign\"\u003e@bsndesign\u0026rsquo;s\u003c/a\u003e notes to said talk:\u003c/p\u003e","title":"ReleaseNotes 2016"},{"content":"\nTwo weeks ago I\u0026rsquo;ve attended the 360iDev conference in Denver. This year was my second year that I attended 360iDev.\nFor those of you who don\u0026rsquo;t know what I\u0026rsquo;m talking about, it\u0026rsquo;s an iOS conference focusing on everything related to iOS Development. The conference lasts four days and usually has at least 3-4 different topics going at the same time so that everyone can find a topic they like at any given time. The topics can be grouped into either iOS, technical or business topics. That might sound a bit like every other conference, but I haven\u0026rsquo;t told you the best part yet: 360iDev\u0026rsquo;s community!\nAs 360iDev originated as an indie conference and still understands itself as such, it attracts a unique set of people that are happy to connect and exchange. It\u0026rsquo;s also limited to somewhere between 300-400 people, which is still a big group but not huge like WWDC or some other big conferences. This makes it a great place for anyone that enjoy quality over quantity and gives you a better chance to connect with fellow devs.\nThis year was not different in that perspective. The community once more helped to make this 4 great days.\nThere were some great talks that I loved for so many reasons, two of them were Jost Micheals general session on Effective Strategies for Selling Out as well as Curtis Herbert\u0026rsquo;s Challenging our Assumptions to Succeed in the App Store.\nBut there was also something else this year that was special to me: It was my first year speaking at 360iDev!!\nMy talk was titled On The Shoulder Of Giants: How To Properly Mentor A Junior Developer. (If you ever come across the video of my talk, I want to mention that this isn\u0026rsquo;t my regular voice, but rather some problem they had with the audio recording) It was a business talk trying to shed light on the receiving end of a mentoring relationship - A topic that\u0026rsquo;s important to me, to which I started collecting thoughts and notes a bit over 7 years ago.\nThe journey it took to get this idea to a finished talk will soon be subject of a different post, there were so many things that seemed easy but turned out to be difficult (Dilbert Comics Licensing, Talk Sponsoring, Etc.) Yet, overcoming all these struggles was totally worth it. The audience seemed to like my talk and furthermore gave me a rating of 4.21 on a scale from 1-5 - not too bad for my first conference talk in a foreign language.\nI have to say, it was a great experience speaking at 360iDev and I\u0026rsquo;m looking forward to more speaking proposals and hopefully more speaking gigs.\nIt was great seeing everyone in the business again and I hope to see you next year!\nThanks to everyone that attended my talk and gave me feedback! It meant a lot to me. Keep rockin'\n","permalink":"https://iflorian.com/360idev2016-a-mile-high-conference/","summary":"\u003cp\u003e\u003cimg alt=\"360iDev Logo\" loading=\"lazy\" src=\"http://360idev.com/wp-content/uploads/2014/06/Sticker-nodate.png\"\u003e\u003c/p\u003e\n\u003cp\u003eTwo weeks ago I\u0026rsquo;ve attended the \u003ca href=\"http://360idev.com\"\u003e360iDev\u003c/a\u003e conference in Denver. This year was my second year that I attended 360iDev.\u003c/p\u003e\n\u003cp\u003eFor those of you who don\u0026rsquo;t know what I\u0026rsquo;m talking about, it\u0026rsquo;s an iOS conference focusing on everything related to iOS Development. The conference lasts four days and usually has at least 3-4 different topics going at the same time so that everyone can find a topic they like at any given time.  The topics can be grouped into either iOS, technical or business topics. That might sound a bit like every other conference, but I haven\u0026rsquo;t told you the best part yet: 360iDev\u0026rsquo;s community!\u003c/p\u003e","title":"360iDev2016 - Denver's Premier iOS Conference"},{"content":"You\u0026rsquo;ve made it! Welcome to my blog!\nFor years I wanted to write my own blog and share my opinion with the rest of the world. Now I finally took some time and created this little blog. I hope everyone can enjoy it!\nBefore you start reading through my blog, let me introduce myself: My name is Florian. I\u0026rsquo;m a German expat living in the US. Software Engineering is what I studied and what I currently do in my full time job. I\u0026rsquo;ll be writing about technical things like the coding I\u0026rsquo;m doing (iOS and Backend stuff), some of my hobbies (electric unicycling, 3D printing) or whatever comes into my mind.\nI hope you enjoy it! Leave a comment if you do, otherwise constructive criticism is fine ;)\n","permalink":"https://iflorian.com/welcome/","summary":"\u003cp\u003eYou\u0026rsquo;ve made it! Welcome to my blog!\u003c/p\u003e\n\u003cp\u003eFor years I wanted to write my own blog and share my opinion with the rest of the world. Now I finally took some time and created this little blog. I hope everyone can enjoy it!\u003c/p\u003e\n\u003cp\u003eBefore you start reading through my blog, let me introduce myself:\nMy name is Florian. I\u0026rsquo;m a German expat living in the US. Software Engineering is what I studied and what I currently do in my full time job.\nI\u0026rsquo;ll be writing about technical things like the coding I\u0026rsquo;m doing (iOS and Backend stuff), some of my hobbies (electric unicycling, 3D printing) or whatever comes into my mind.\u003c/p\u003e","title":"Welcome!"}]